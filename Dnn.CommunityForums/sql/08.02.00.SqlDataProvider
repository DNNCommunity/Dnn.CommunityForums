SET NOCOUNT ON 
GO

/* issue 898 begin - remove duplicated foreign keys and rename some foreign keys with embedded _activeforums_ */

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_Replies_activeforums_Content]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Replies]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Replies] DROP CONSTRAINT [FK_{objectQualifier}activeforums_Replies_activeforums_Content]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_Topics_activeforums_Content]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Topics] DROP CONSTRAINT [FK_{objectQualifier}activeforums_Topics_activeforums_Content]

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_Replies_activeforums_Topics]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Replies]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Replies] DROP CONSTRAINT [FK_{objectQualifier}activeforums_Replies_activeforums_Topics]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_Replies_Topics]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Replies]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Replies] DROP CONSTRAINT [FK_{objectQualifier}activeforums_Replies_Topics]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Replies] WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}activeforums_Replies_Topics] FOREIGN KEY([TopicId])
REFERENCES {databaseOwner}[{objectQualifier}activeforums_Topics] ([TopicId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Replies] CHECK CONSTRAINT [FK_{objectQualifier}activeforums_Replies_Topics]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_ForumTopics_activeforums_Replies]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_activeforums_Replies]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_ForumTopics_Replies]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_Replies]
GO

UPDATE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] SET [LastReplyId] = NULL WHERE [LastReplyId] = 0
GO

ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_Replies] FOREIGN KEY([LastReplyId])
REFERENCES {databaseOwner}[{objectQualifier}activeforums_Replies] ([ReplyId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] CHECK CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_Replies]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_ForumTopics_activeforums_Topics]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_activeforums_Topics]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_ForumTopics_Topics]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_Topics]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_Topics] FOREIGN KEY([TopicId])
REFERENCES {databaseOwner}[{objectQualifier}activeforums_Topics] ([TopicId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] CHECK CONSTRAINT [FK_{objectQualifier}activeforums_ForumTopics_Topics]
GO

/* issue 898 end - remove duplicated foreign keys and rename some foreign keys with embedded _activeforums_ */

/* ----------------- */

/* issue 1012 - begin - drop indexes IX_activeforums_Content_ModuleId, IX_activeforums_Topics_ContentId  */

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Content') AND name = N'IX_{objectQualifier}activeforums_Content_ModuleId')
DROP INDEX [IX_{objectQualifier}activeforums_Content_ModuleId] ON {databaseOwner}{objectQualifier}activeforums_Content 
GO
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Topics') AND name = N'IX_{objectQualifier}activeforums_Topics_ContentId')
DROP INDEX [IX_{objectQualifier}activeforums_Topics_ContentId] ON {databaseOwner}{objectQualifier}activeforums_Topics
GO

/* issue 1012 - end - drop indexes IX_activeforums_Content_ModuleId, IX_activeforums_Topics_ContentId  */
/* ----------------- */


/* issue 726 begin : Add ModuleId to activeforums_Permissions */


/* add ModuleId to activeforums_Permissions */
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE Name = N'ModuleId' and Object_ID = Object_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))    
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] ADD
	ModuleId INT NULL
END
GO

/* populate ModuleId in activeforums_Permissions */

UPDATE p
SET p.ModuleId = f.ModuleId
FROM {databaseOwner}[{objectQualifier}activeforums_Permissions] p
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] f
ON p.PermissionsId = f.PermissionsId
WHERE p.ModuleId IS NULL

UPDATE p
SET p.ModuleId = g.ModuleId
FROM {databaseOwner}[{objectQualifier}activeforums_Permissions] p
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] g
ON p.PermissionsId = g.PermissionsId
WHERE p.ModuleId IS NULL

/* REMOVE orphans */
DELETE 
{databaseOwner}[{objectQualifier}activeforums_Permissions]
WHERE ModuleId IS NULL

/* set ModuleId to not null */
IF EXISTS(SELECT * FROM SYS.COLUMNS WHERE Name = N'ModuleId' and Object_ID = Object_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))    
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] ALTER COLUMN ModuleId int NOT NULL
END
GO

/* activeforums_Permissions - cascade delete from Modules */
IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_Permissions_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] DROP CONSTRAINT 
[FK_{objectQualifier}activeforums_Permissions_Modules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] ADD CONSTRAINT
	[FK_{objectQualifier}activeforums_Permissions_Modules] FOREIGN KEY (ModuleId) 
	REFERENCES {databaseOwner}[{objectQualifier}Modules] (ModuleID) 
	ON DELETE CASCADE 
GO

/* issue 726 end   : Add ModuleId to activeforums_Permissions */

/* --------------------- */

/* issue 761 + 1006 begin: activeforums_UserProfiles remove unneeded user preferences + remove ModuleId; add FK to PortalUsers  */



/*activeforums_UserProfiles_Get*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[{objectQualifier}activeforums_UserProfiles_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
	@PortalId int,
	@UserId int
AS
BEGIN
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_Create @PortalId, @UserId
	SET NOCOUNT ON
	SELECT		P.ProfileId, P.UserId, P.PortalId, P.TopicCount, P.ReplyCount, P.ViewCount, 
				P.AnswerCount, P.RewardPoints, P.UserCaption, P.DateCreated, 
                P.DateUpdated, P.DateLastActivity, P.Signature, P.SignatureDisabled, 
				P.TrustLevel, P.AdminWatch, P.AttachDisabled, P.Avatar, P.AvatarType, P.AvatarDisabled, 
				P.PrefDefaultSort, P.PrefDefaultShowReplies, P.PrefJumpLastPost, P.PrefTopicSubscribe,
				P.PrefSubscriptionType, P.PrefEmailFormat, P.PrefBlockAvatars, 
				P.PrefBlockSignatures, P.PrefPageSize,
				IsNull(U.Username,'') as UserName, IsNull(U.FirstName,'') as FirstName, 
				IsNull(U.LastName,'') as LastName, IsNull(U.Email,'') as Email, IsNull(U.DisplayName,'') as DisplayName,
				IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GETUTCDATE()) <=1 THEN 1 ELSE 0 END),
				IsNull(P.DateLastPost,'') as DateLastPost,
				IsNull(P.DateLastReply,'') as DateLastReply
	FROM        {databaseOwner}{objectQualifier}activeforums_UserProfiles AS P WITH (NOLOCK) LEFT OUTER JOIN
                {databaseOwner}{objectQualifier}Users AS U WITH (NOLOCK) ON P.UserId = U.UserID
	WHERE P.UserId = @UserId AND P.PortalId = @PortalId
END
GO


/*activeforums_UserProfiles_List*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_List]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_List]
	@PortalId int,
	@MaxRows int,
	@RowIndex int,
	@Filter nvarchar(50)
AS
BEGIN
SELECT COUNT(U.UserId) FROM {databaseOwner}{objectQualifier}Users AS U INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS P ON U.UserID = P.UserId 
WHERE PortalId = @PortalId AND Authorised = 1 AND (@Filter = '' OR @Filter <> '' AND DisplayName LIKE @Filter + '%')
END
BEGIN
	SELECT 		ProfileId, UserId, PortalId, TopicCount, ReplyCount, ViewCount, 
				AnswerCount, RewardPoints, UserCaption, DateCreated, 
                DateUpdated, DateLastActivity, [Signature], SignatureDisabled, 
				TrustLevel, AdminWatch, AttachDisabled, Avatar, AvatarType, AvatarDisabled, 
				PrefDefaultSort, PrefDefaultShowReplies, PrefJumpLastPost, PrefTopicSubscribe,
				PrefSubscriptionType, PrefEmailFormat, PrefBlockAvatars, 
				PrefBlockSignatures, PrefPageSize,
				UserName, FirstName, 
				LastName, Email, DisplayName,
				DateLastPost,IsUserOnline, RowRank
	
		 FROM (SELECT P.ProfileId, U.UserId, UP.PortalId,
		 			IsNull(P.TopicCount,0) as TopicCount,
				IsNull(P.ReplyCount,0) as ReplyCount,
				IsNull(P.ViewCount,0) as ViewCount,
				IsNull(P.AnswerCount,0) as AnswerCount,
				IsNull(P.RewardPoints,0) as RewardPoints,
				P.UserCaption, P.DateCreated, 
                P.DateUpdated, P.DateLastActivity, P.Signature, P.SignatureDisabled, 
				P.TrustLevel, P.AdminWatch, P.AttachDisabled, P.Avatar, P.AvatarType, P.AvatarDisabled, 
				P.PrefDefaultSort, P.PrefDefaultShowReplies, P.PrefJumpLastPost, P.PrefTopicSubscribe,
				P.PrefSubscriptionType, P.PrefEmailFormat, P.PrefBlockAvatars, 
				P.PrefBlockSignatures, P.PrefPageSize, 
				IsNull(U.Username,'') as UserName, IsNull(U.FirstName,'') as FirstName, 
				IsNull(U.LastName,'') as LastName, IsNull(U.Email,'') as Email , IsNull(U.DisplayName,'') as DisplayName,
				IsNull(P.DateLastPost,'') as DateLastPost,
				IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GETUTCDATE()) <=1 THEN 1 ELSE 0 END),
				ROW_NUMBER() OVER (Order By DisplayName) as RowRank
				FROM        {databaseOwner}{objectQualifier}Users AS U INNER JOIN
				        {databaseOwner}{objectQualifier}UserPortals AS UP ON U.UserID = UP.UserId LEFT OUTER JOIN
						{databaseOwner}{objectQualifier}activeforums_UserProfiles AS P ON U.UserID = P.UserId 
				WHERE     (UP.Authorised = 1) AND (UP.PortalId = @PortalId) AND (@Filter = '' OR @Filter <> '' AND DisplayName LIKE @Filter + '%')
			) as Members
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
END
GO


/* --------------------- */

/*activeforums_UserProfiles_Save*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Save]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Save]
@PortalId	int,
@UserId	int,
@TopicCount	int,
@ReplyCount	int,
@ViewCount	int,
@AnswerCount	int,
@RewardPoints	int,
@UserCaption	nvarchar(255),
@Signature	nvarchar(1500),
@SignatureDisabled	bit,
@TrustLevel int,
@AdminWatch	bit,
@AttachDisabled	bit,
@Avatar	nvarchar(2000),
@AvatarType	int,
@AvatarDisabled	bit,
@PrefDefaultSort	char(10),
@PrefDefaultShowReplies	bit,
@PrefJumpLastPost	bit,
@PrefTopicSubscribe	bit,
@PrefSubscriptionType	int,
@PrefBlockAvatars	bit,
@PrefBlockSignatures	bit,
@PrefPageSize	int
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE    {databaseOwner}{objectQualifier}activeforums_UserProfiles
	SET              TopicCount = @TopicCount, ReplyCount = @ReplyCount, ViewCount = @ViewCount, AnswerCount = @AnswerCount, RewardPoints = @RewardPoints, 
						  UserCaption = @UserCaption, DateUpdated = GETDATE(), [Signature] = @Signature, SignatureDisabled = @SignatureDisabled, TrustLevel = @TrustLevel, 
						  AdminWatch = @AdminWatch, AttachDisabled = @AttachDisabled, Avatar = @Avatar, AvatarType = @AvatarType, AvatarDisabled = @AvatarDisabled, 
						  PrefDefaultSort = @PrefDefaultSort, PrefDefaultShowReplies = @PrefDefaultShowReplies, PrefJumpLastPost = @PrefJumpLastPost, 
						  PrefTopicSubscribe = @PrefTopicSubscribe, PrefSubscriptionType = @PrefSubscriptionType, PrefBlockAvatars = @PrefBlockAvatars, 
						  PrefBlockSignatures = @PrefBlockSignatures, PrefPageSize = @PrefPageSize
	WHERE     (UserId = @UserId) AND (PortalId = @PortalId)
END
GO


/*activeforums_UserProfiles_Create*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Create]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Create]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Create]
@PortalId int,
@UserId int
AS
IF NOT EXISTS(Select ProfileId FROM {databaseOwner}{objectQualifier}activeforums_UserProfiles WHERE UserId = @UserId AND PortalId = @PortalId)
	BEGIN
	DECLARE @MemberSince datetime
	SELECT @MemberSince = CreatedDate FROM {databaseOwner}{objectQualifier}UserPortals WHERE UserId = @UserId AND PortalId = @PortalId
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_UserProfiles
		(UserId, PortalId, DateCreated, DateLastActivity)
		VALUES
		(@UserId, @PortalId, IsNull(@MemberSince,GETUTCDATE()), GETUTCDATE())
	DECLARE @TopicCount int 
	DECLARE @ReplyCount int
	SELECT @TopicCount = Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Topics as T INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content as C ON T.ContentId = C.ContentId
	WHERE c.authorid = @UserId
	SELECT @ReplyCount = Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Replies as R INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content as C ON R.ContentId = C.ContentId
	WHERE c.authorid = @UserId
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles
		SET TopicCount = @TopicCount, ReplyCount = @ReplyCount WHERE UserId = @UserId AND PortalId = @PortalId
	END
GO

/*activeforums_UserProfiles_UpdateActivity*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_UpdateActivity]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_UpdateActivity]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_UpdateActivity]
@PortalId int,
@UserId int

AS
If @UserId > 0 
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_Create @PortalId, @UserId
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles SET DateLastActivity = GETUTCDATE() WHERE UserId = @UserId and PortalId = @PortalId
GO

/* --------------------- */

/*activeforums_UI_ForumView*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_ForumView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_ForumView]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_ForumView]
@PortalId int,
@ModuleId int,
@UserId int,
@IsSuperUser bit = 0,
@ParentForumId int = -1,
@ForumIds nvarchar(2000) = ''
AS
IF @ParentForumId = -1
BEGIN
SELECT         G.ForumGroupId, G.ModuleId, G.GroupName, F.ForumId, F.ForumName, F.ForumDesc, F.Active AS ForumActive, F.Hidden AS ForumHidden, F.TotalTopics, 
					F.TotalReplies, F.ParentForumId, G.SortOrder AS GroupSort, 
					F.SortOrder AS ForumSort, G.Active AS GroupActive, G.Hidden AS GroupHidden,
					F.LastTopicId,
					F.LastReplyId,
					IsNull(F.LastPostSubject,'') as LastPostSubject,
					IsNull(F.LastPostAuthorName,'') as LastPostAuthorName,
					IsNull(F.LastPostAuthorId,-1) as LastPostAuthorId,
					IsNull(F.LastPostDate,'') as LastPostDate,
					ISNULL(g.PrefixURL,'') as GroupPrefixURL,
					ISNULL(f.PrefixURL, '') as PrefixURL,
					LastRead = IsNull((SELECT LastAccessDate FROM {databaseOwner}{objectQualifier}activeforums_Forums_Tracking WHERE UserId = @UserId AND ForumId = F.ForumId),''),
					"AllowRSS" = (SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = F.ModuleId AND GroupKey = F.ForumSettingsKey AND SettingName = 'ALLOWRSS'),
					P.*,
					ISNULL(t.URL,'') as TopicURL,
					COALESCE((SELECT  COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = F.ForumId) AND (TopicId = 0)) , 0) AS ForumSubscriberCount
	FROM         
		{databaseOwner}{objectQualifier}activeforums_Groups AS G INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums AS F ON G.ForumGroupId = F.ForumGroupId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Permissions as p ON f.PermissionsId = p.PermissionsId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = f.ForumId LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}activeforums_Topics as t ON t.TopicId = f.LastTopicId
	WHERE G.ModuleId = @ModuleId AND (G.Active = 1 AND F.Active = 1) AND (@ParentForumId = -1 OR (@ParentForumId > 0 AND F.ParentForumId = @ParentForumId))
	ORDER BY GroupSort, ForumSort
END
ELSE
BEGIN
SELECT         G.ForumGroupId, G.ModuleId, G.GroupName, F.ForumId, F.ForumName, F.ForumDesc, F.Active AS ForumActive, F.Hidden AS ForumHidden, F.TotalTopics, 
					F.TotalReplies, F.ParentForumId, G.SortOrder AS GroupSort, F.SortOrder AS ForumSort, G.Active AS GroupActive, G.Hidden AS GroupHidden,
					F.LastTopicId,
					F.LastReplyId,
					IsNull(F.LastPostSubject,'') as LastPostSubject,
					IsNull(F.LastPostAuthorName,'') as LastPostAuthorName,
					IsNull(F.LastPostAuthorId,-1) as LastPostAuthorId,
					IsNull(F.LastPostDate,'') as LastPostDate,
					ISNULL(g.PrefixURL,'') as GroupPrefixURL,
					ISNULL(f.PrefixURL, '') as PrefixURL,
					ISNULL(t.URL, '') as TopicURL,
					COALESCE((SELECT  COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = F.ForumId) AND (TopicId = 0)) , 0) AS ForumSubscriberCount,
					LastRead = IsNull((SELECT LastAccessDate FROM {databaseOwner}{objectQualifier}activeforums_Forums_Tracking WHERE UserId = @UserId AND ForumId = F.ForumId),''),
					"AllowRSS" = (SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = F.ModuleId AND GroupKey = F.ForumSettingsKey AND SettingName = 'ALLOWRSS'),
					P.*
	FROM         
		{databaseOwner}{objectQualifier}activeforums_Groups AS G INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums AS F ON G.ForumGroupId = F.ForumGroupId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Permissions as p ON f.PermissionsId = p.PermissionsId LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}activeforums_Topics as t ON t.TopicId = f.LastTopicId 
					 
	WHERE G.ModuleId = @ModuleId AND (G.Active = 1 AND F.Active = 1) AND (@ParentForumId = -1 OR (@ParentForumId > 0 AND F.ParentForumId = @ParentForumId))
	ORDER BY GroupSort, ForumSort
END
If @UserId > 0 AND @ParentForumId =-1
	BEGIN
	SELECT TopicCount, ReplyCount, ViewCount, AnswerCount, RewardPoints, DateLastActivity, 
                      DateLastPost, SignatureDisabled, TrustLevel, AdminWatch, AttachDisabled, PrefDefaultSort, PrefDefaultShowReplies, 
                      PrefJumpLastPost, PrefTopicSubscribe, PrefSubscriptionType, PrefEmailFormat, PrefBlockAvatars, PrefBlockSignatures, PrefPageSize
                      
	FROM         {databaseOwner}{objectQualifier}activeforums_UserProfiles WHERE UserId = @UserId AND PortalId = @PortalId
	END


GO


/*activeforums_UI_TopicsView */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]
@PortalId int,
@ModuleId int,
@ForumId int,
@UserId int,
@RowIndex int = 0, 
@MaxRows int = 20,
@IsSuperUser bit = 0,
@SortColumn nvarchar(25) = 'ReplyCreated'
AS
--Forum/Group Info
DECLARE @PrefixURL nvarchar(255)
DECLARE @GroupPrefix nvarchar(255)
SET @GroupPrefix = (SELECT g.PrefixURL from {databaseOwner}{objectQualifier}activeforums_Groups as g INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.ForumGroupId = g.ForumGroupId WHERE f.ForumId=@ForumId)
SET @PrefixURL = (SELECT PRefixURL from {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
IF @PrefixURL <> '' OR @PrefixURL IS NOT NULL
	SET @PrefixURL = '/' + @PrefixURL + '/'
IF @GroupPrefix <> '' OR @GroupPrefix IS NOT NULL
	SET @PrefixURL = '/' + @GroupPrefix + @PrefixURL 
BEGIN
	SELECT v.ForumName, v.GroupName, v.ForumGroupId, v.ForumDesc,
		TopicsTemplateId = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'TOPICSTEMPLATEID' and GroupKey = v.ForumSettingsKey),0),
		AllowRSS = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'ALLOWRSS' and GroupKey = v.ForumSettingsKey),0),
		TopicRowCount = IsNull((SELECT Count(t.TopicId) FROM {databaseOwner}{objectQualifier}activeforums_Topics as t inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid WHERE ft.ForumId = @ForumId AND t.IsApproved = 1 and t.IsDeleted = 0),0),
		IsSubscribedForum = IsNull((SELECT ID FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions WHERE ForumId = @ForumId AND TopicId = 0 AND UserId = @UserId),0),
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
		
		 FROM {databaseOwner}{objectQualifier}vw_activeforums_GroupForum as v WHERE v.ForumActive = 1 AND v.ModuleId = @ModuleId AND v.ForumId = @ForumId
END
--Forum Security
BEGIN
	Select p.* from {databaseOwner}{objectQualifier}activeforums_Permissions as p INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.PermissionsId = p.PermissionsId WHERE f.ForumId = @ForumId
	
END
--Get Sub Forums
 exec {databaseOwner}{objectQualifier}activeforums_UI_ForumView @PortalId, @ModuleId,@UserId,@IsSuperUser, @ForumId

--Get Topics

SELECT 
	ForumId,
	LastReplyId,
	TopicId,
	ViewCount,
	ReplyCount,
	IsLocked,
	IsPinned,
	TopicIcon,
	StatusId,
	IsAnnounce,
	AnnounceStart,
	AnnounceEnd,
	TopicType,
	[Subject],
	Summary,
	AuthorId,
	AuthorName,
	Body,
	DateCreated,
	AuthorUserName,
	AuthorFirstName,
	AuthorLastName,
	AuthorDisplayName,
	LastReplySubject,
	LastReplySummary,
	LastReplyAuthorId,
	LastReplyAuthorName,
	LastReplyUserName,
	LastReplyFirstName,
	LastReplyLastName,
	LastReplyDisplayName,
	LastReplyDate,
	TopicRating,
	UserLastReplyRead,
	UserLastTopicRead,
	TopicURL,
	TopicData,
	FullURL,
	TopicSubscriberCount,
	ForumSubscriberCount
	FROM (

SELECT 
	f.ForumId,
	IsNull(f.LastReplyId,0) as LastReplyId,
	t.TopicId,
	t.ViewCount,
	t.ReplyCount,
	t.IsLocked,
	t.IsPinned,
	IsNull(t.TopicIcon,'') as TopicIcon,
	t.StatusId,
	t.IsAnnounce,
	t.AnnounceStart,
	t.AnnounceEnd,
	t.TopicType,
	c.Subject,
	IsNull(c.Summary,'') as Summary,
	IsNull(c.AuthorId,-1) as AuthorId,
	IsNull(c.AuthorName,'') as AuthorName,
	c.Body,
	c.DateCreated,
	IsNull(u.Username,'') as AuthorUserName,
	IsNull(u.FirstName,'') as AuthorFirstName,
	IsNull(u.LastName,'') as AuthorLastName,
	IsNull(u.DisplayName,'') as AuthorDisplayName,
	CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	t.URL as TopicURL,
	IsNull(t.TopicData,'') as TopicData,
	CASE WHEN ISNULL(t.URL,'') <> '' THEN @PrefixURL + t.URL ELSE '' END as FullURL,
	(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC, T.Priority DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN 
										CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END
									WHEN @SortColumn = 'TopicCreated' THEN
										c.DateCreated
								END DESC) as RowRank,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = T.TopicId)), 0) AS TopicSubscriberCount,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
				
		FROM	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on f.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on f.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
	
		WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0)	
		) AS TopicsWithRowNumbers
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	IF @RowIndex = 0
	BEGIN
		SELECT 
f.ForumId,
	IsNull(f.LastReplyId,0) as LastReplyId,
	t.TopicId,
	t.ViewCount,
	t.ReplyCount,
	t.IsLocked,
	t.IsPinned,
	IsNull(t.TopicIcon,'') as TopicIcon,
	t.StatusId,
	t.IsAnnounce,
	t.AnnounceStart,
	t.AnnounceEnd,
	t.TopicType,
	c.Subject,
	IsNull(c.Summary,'') as Summary,
	IsNull(c.AuthorId,-1) as AuthorId,
	IsNull(c.AuthorName,'') as AuthorName,
	c.Body,
	c.DateCreated,
	IsNull(u.Username,'') as AuthorUserName,
	IsNull(u.FirstName,'') as AuthorFirstName,
	IsNull(u.LastName,'') as AuthorLastName,
	IsNull(u.DisplayName,'') as AuthorDisplayName,
	CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	t.URL as TopicURL,
	IsNull(t.TopicData,'') as TopicData,
	CASE WHEN ISNULL(t.URL,'') <> '' THEN @PrefixURL + t.URL ELSE '' END as FullURL,
	(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END DESC
											) as RowRank,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = T.TopicId)), 0) AS TopicSubscriberCount,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
				
		FROM	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on f.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on f.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
	
		WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0 AND T.IsAnnounce = 1 AND T.AnnounceStart <= GETUTCDATE() AND T.AnnounceEnd >= GETUTCDATE())
		ORDER BY T.IsPinned DESC, c.DateCreated DESC, rc.DateCreated DESC
	END
BEGIN
If @UserId > 0
	BEGIN
	exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @UserId
	END
END

GO
/*activeforums_UI_TopicView*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicView]
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_UI_TopicView
@PortalId int,
@ModuleId int,
@ForumId int,
@TopicId int,
@UserId int,
@RowIndex int, 
@MaxRows int,
@IsSuperUser bit = 0,
@Sort varchar(10) = 'ASC'
AS
--Forum/Group/Topic Info
DECLARE @LastPostId int
DECLARE @ReplyCount int
SET @ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
DECLARE @Tags nvarchar(1000)
SET @Tags= RTRIM(IsNull({databaseOwner}{objectQualifier}activeforums_Topics_GetTags(@TopicId),''))
BEGIN
SELECT     
	v.ForumGroupId, 
	v.ModuleId, 
	v.GroupName, 
	v.GroupActive, 
	v.GroupHidden, 
	v.ForumId, 
	v.ParentForumId, 
	v.ForumName, 
	v.ForumDesc, 
	v.ForumActive, 
	v.ForumHidden, 
	v.TotalTopics, 
	ISNULL(v.TotalReplies, 0) AS TotalReplies,
	v.LastPostId,
	v.GroupSettingsKey,
	v.ForumSettingsKey,
	TopicTemplateId = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'TOPICTEMPLATEID' and GroupKey = v.ForumSettingsKey),0),
	
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS {objectQualifier}activeforums_Settings_1
							WHERE      (SettingName = 'ALLOWRSS') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowRSS,
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS {objectQualifier}activeforums_Settings_3
							WHERE      (SettingName = 'ALLOWHTML') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowHTML,
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_3
							WHERE      (SettingName = 'ALLOWLIKES') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowLikes,
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS {objectQualifier}activeforums_Settings_2
							WHERE      (SettingName = 'ALLOWSCRIPT') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowScript,
							IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings
							WHERE      (SettingName = 'ALLOWTAGS') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowTags,
							 FT.TopicId,
						  (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
							FROM          {databaseOwner}{objectQualifier}activeforums_Topics_Ratings
							WHERE      (TopicId = @TopicId)) AS TopicRating,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.DateCreated,'') ELSE IsNull(R.DateCreated,'') END AS LastPostDate, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.AuthorId,'') ELSE IsNull(R.AuthorId,'') END AS LastPostAuthorId, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.AuthorName,'') ELSE IsNull(R.AuthorName,'') END AS LastPostAuthorName,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.UserName,'') ELSE IsNull(R.Username,'') END AS LastPostUserName,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.FirstName,'') ELSE IsNull(R.FirstName,'') END AS LastPostFirstName, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.LastName,'') ELSE IsNull(R.LastName,'') END AS LastPostLastName, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.DisplayName,'') ELSE IsNull(R.DisplayName,'') END AS LastPostDisplayName, T.Subject, T.Summary, T.Body, T.AuthorId, T.AuthorName, T.Username, T.FirstName, T.LastName, 
					  T.DisplayName, T.DateCreated, T.DateUpdated, T.ViewCount, @ReplyCount as ReplyCount, T.IsPinned, T.IsLocked, T.StatusId, T.TopicIcon, T.TopicType, @Tags as Tags,ISNULL(t.TopicData,'') as TopicData,
					  {databaseOwner}{objectQualifier}activeforums_Poll.PollID,
					aft.NextTopic, 
					aft.PrevTopic,
					t.URL,
					T.AuthorName as TopicAuthor,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = @TopicId)), 0) AS TopicSubscriberCount,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
FROM
	{databaseOwner}{objectQualifier}activeforums_Topics aft INNER JOIN          
	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS FT ON aft.TopicId = FT.TopicId INNER JOIN
					  {databaseOwner}{objectQualifier}vw_activeforums_GroupForum AS v ON FT.ForumId = v.ForumId INNER JOIN
					  {databaseOwner}{objectQualifier}vw_activeforums_ForumTopics AS T ON FT.TopicId = T.TopicId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies AS R ON FT.LastReplyId = R.ReplyId AND FT.LastReplyId IS NOT NULL LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Poll ON T.TopicId = {databaseOwner}{objectQualifier}activeforums_Poll.TopicId
WHERE     (v.ForumActive = 1) AND (v.ModuleId = @ModuleId) AND (v.ForumId = @ForumId) AND (FT.TopicId = @TopicId)
END
--Forum Security
BEGIN
	Select p.* from {databaseOwner}{objectQualifier}activeforums_Permissions as p INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.PermissionsId = p.PermissionsId WHERE f.ForumId = @ForumId
	
END
--Get Topic and Replies
	SELECT	ForumId, TopicId, ReplyId, [Subject], Summary, AuthorId, StatusId, AuthorName, UserName, FirstName, LastName,
			DisplayName, DateCreated, DateUpdated, Body, TopicCount, ReplyCount, ViewCount, AnswerCount,
			RewardPoints, UserDateCreated, DateLastActivity, UserCaption, [Signature], SignatureDisabled,
			UserPostCount, UserTotalPoints,IPAddress,Avatar,AvatarType,AvatarDisabled,MemberSince,
			ContentId,IsUserOnline,ReplyToId,	UserRoles = {databaseOwner}{objectQualifier}activeforums_UserProfiles_GetUserRoles(AuthorId, @PortalID, GETUTCDATE(),0),
			@Tags as Tags
			
	FROM
			(
			SELECT	T.ForumId, T.TopicId, T.ReplyId, T.Subject, T.Summary, T.AuthorId, T.StatusId, IsNull(T.AuthorName,'anon') as AuthorName, IsNull(T.Username,IsNull(T.AuthorName,'anon')) as Username,
			IsNull(T.FirstName,'') as FirstName, IsNull(T.LastName,'') as LastName,IsNull(T.DisplayName,T.AuthorName) as DisplayName,
			T.DateCreated, T.DateUpdated, C.Body, IsNull(P.TopicCount,0) as TopicCount, IsNull(P.ReplyCount,0) as ReplyCount,
			IsNull(P.ViewCount,0) as ViewCount, IsNull(P.AnswerCount,0) as AnswerCount, IsNull(P.RewardPoints,0) as RewardPoints,
			IsNull(P.DateCreated,'') AS UserDateCreated, IsNull(P.DateLastActivity,'') as DateLastActivity, 
			IsNull(P.UserCaption,'') as UserCaption, IsNull(P.Signature,'') as [Signature], IsNull(P.SignatureDisabled,0) as SignatureDisabled, 
			UserPostCount = (IsNull(P.TopicCount,0) + IsNull(P.ReplyCount,0)), 
			UserTotalPoints = (IsNull(P.TopicCount,0) + IsNull(P.ReplyCount,0) + IsNull(P.AnswerCount,0) + IsNull(P.RewardPoints,0)),
			C.IPAddress, IsNull(P.Avatar,'') as Avatar, IsNull(P.AvatarType,0) as AvatarType, IsNull(P.AvatarDisabled,0) as AvatarDisabled,
			IsNull(P.DateCreated,'') as MemberSince,
			C.ContentId, IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GETUTCDATE()) <=1 THEN 1 ELSE 0 END),T.ReplyToId,
			ROW_NUMBER() OVER (Order By 
								CASE
									WHEN @Sort = 'DESC' THEN T.DateCreated END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN T.DateCreated END ASC
								) as RowRank
			FROM	{databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
					{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId LEFT OUTER JOIN
					{databaseOwner}{objectQualifier}activeforums_UserProfiles AS P ON C.AuthorId = P.UserId AND P.PortalId = @PortalId
			WHERE     (T.TopicId = @TopicId)
			)
		AS TopicWithRowNumbers
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)

--Get Attachments
SELECT     A.AttachId, A.ContentId, A.UserID, A.[FileName], A.ContentType, A.FileSize, A.FileID
FROM        {databaseOwner}{objectQualifier}activeforums_Attachments AS A inner join
			{databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T ON A.ContentId = T.ContentId
WHERE     (T.TopicId = @TopicId AND (A.AllowDownload = 1 OR A.AllowDownload IS NULL))

--Update View Count
UPDATE {databaseOwner}{objectQualifier}activeforums_Topics SET ViewCount = (ViewCount+1) WHERE TopicId = @TopicId
If @UserId > 0
BEGIN
SELECT @LastPostId = IsNull(LastReplyId,0) FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE ForumId = @ForumId AND TopicId = @TopicId
exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId	
SET @LastPostId = IsNull(@LastPostId,0)
exec {databaseOwner}{objectQualifier}activeforums_Topics_Tracking_UpdateUser @ForumId, @TopicId, @LastPostId, @UserId
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @UserId
END

GO



/* activeforums_UserProfiles_Opt2  */
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{objectQualifier}activeforums_UserProfiles') AND name = N'idx_{objectQualifier}activeforums_UserProfiles_Opt2')
DROP INDEX [idx_{objectQualifier}activeforums_UserProfiles_Opt2] ON {databaseOwner}{objectQualifier}activeforums_UserProfiles 
GO
CREATE NONCLUSTERED INDEX [idx_{objectQualifier}activeforums_UserProfiles_Opt2] ON {databaseOwner}{objectQualifier}activeforums_UserProfiles
(
	[UserId] ASC
)
INCLUDE ( [TopicCount],
[ReplyCount],
[ViewCount],
[AnswerCount],
[RewardPoints],
[UserCaption],
[DateCreated],
[DateLastActivity],
[Signature],
[SignatureDisabled],
[Avatar],
[AvatarType],
[AvatarDisabled]
) WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) 
GO



/* activeforums_UserProfiles_Opt3  */
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{objectQualifier}activeforums_UserProfiles') AND name = N'idx_{objectQualifier}activeforums_UserProfiles_Opt3')
DROP INDEX [idx_{objectQualifier}activeforums_UserProfiles_Opt3] ON {databaseOwner}{objectQualifier}activeforums_UserProfiles 
GO
CREATE NONCLUSTERED INDEX [idx_{objectQualifier}activeforums_UserProfiles_Opt3] ON {databaseOwner}{objectQualifier}activeforums_UserProfiles 
(
	[PortalId] ASC,
	[UserId] ASC
)
INCLUDE ( [ProfileId],
[TopicCount],
[ReplyCount],
[ViewCount],
[AnswerCount],
[RewardPoints],
[UserCaption],
[DateCreated],
[DateUpdated],
[DateLastActivity],
[Signature],
[SignatureDisabled],
[TrustLevel],
[AdminWatch],
[AttachDisabled],
[Avatar],
[AvatarType],
[AvatarDisabled],
[PrefDefaultSort],
[PrefDefaultShowReplies],
[PrefJumpLastPost],
[PrefTopicSubscribe],
[PrefSubscriptionType],
[PrefEmailFormat],
[PrefBlockAvatars],
[PrefBlockSignatures],
[PrefPageSize],
[DateLastPost]) WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) 
GO



/* activeforums_UserProfiles_Opt4 -- adding index for last activity for users online */
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{objectQualifier}activeforums_UserProfiles') AND name = N'idx_{objectQualifier}activeforums_UserProfiles_Opt4')
DROP INDEX [idx_{objectQualifier}activeforums_UserProfiles_Opt4] ON {databaseOwner}{objectQualifier}activeforums_UserProfiles 
GO
CREATE NONCLUSTERED INDEX [idx_{objectQualifier}activeforums_UserProfiles_Opt4] ON {databaseOwner}{objectQualifier}activeforums_UserProfiles
(
	[PortalId] ASC,
	[DateLastActivity] DESC,
	[UserId] ASC
)
WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) 
GO


/*activeforums_DashBoard_Stats*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_DashBoard_Stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_DashBoard_Stats]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_DashBoard_Stats]
@PortalId int,
@ModuleId int
AS
BEGIN
SELECT     TOP 5 T.TopicId, C.Subject, C.DateCreated, U.Username, U.FirstName, U.LastName, U.DisplayName, C.AuthorName, C.Summary
FROM         {databaseOwner}{objectQualifier}activeforums_Topics  AS T WITH (NOLOCK) INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content  AS C WITH (NOLOCK) ON T.ContentId = C.ContentId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_ForumTopics AS FT WITH (NOLOCK) ON T.TopicId = FT.TopicId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Forums  AS F WITH (NOLOCK) ON FT.ForumId = F.ForumId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS U ON C.AuthorId = U.UserID
WHERE     (T.IsApproved = 1) AND (T.IsDeleted = 0) AND (F.ModuleId = @ModuleId)
ORDER BY C.DateCreated DESC
END
BEGIN
SELECT  TOP 5   U.UserID, U.Username, U.FirstName, U.LastName, U.Email, U.DisplayName, UP.CreatedDate, UP.PortalId
FROM         {databaseOwner}{objectQualifier}Users AS U WITH (NOLOCK) INNER JOIN
                      {databaseOwner}{objectQualifier}UserPortals AS UP WITH (NOLOCK) ON U.UserID = UP.UserId
WHERE     (UP.Authorised = 1) AND (UP.PortalId = @PortalId)
ORDER BY UP.CreatedDate DESC
END
BEGIN

SELECT   TOP 5  ForumId, ModuleId, ForumName, TotalTopics, TotalReplies
FROM         {databaseOwner}{objectQualifier}activeforums_Forums WITH (NOLOCK)
WHERE     (Active = 1) AND (ModuleId = @ModuleId)
ORDER BY (TotalTopics + TotalReplies) DESC
END
BEGIN
SELECT     TOP 10 UP.ProfileId, UP.UserId, UP.PortalId, UP.TopicCount, UP.ReplyCount, UP.ViewCount, UP.AnswerCount, UP.RewardPoints, U.Username, 
                      U.FirstName, U.LastName, U.DisplayName
FROM         {databaseOwner}{objectQualifier}activeforums_UserProfiles AS UP WITH (NOLOCK) INNER JOIN
             {databaseOwner}{objectQualifier}Users  AS U WITH (NOLOCK) ON UP.UserId = U.UserID
WHERE     (UP.PortalId = @PortalId)
ORDER BY ((UP.TopicCount * 10) + (UP.ReplyCount * 5) + UP.ViewCount) DESC
END
BEGIN
DECLARE @TotalForums int
DECLARE @TotalTopics int
DECLARE @TotalReplies int
DECLARE @TotalUsers int
DECLARE @TotalActiveUsers int
SELECT @TotalForums = Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and Active = 1
SELECT @TotalTopics = SUM(TotalTopics), @TotalReplies = SUM(TotalReplies) FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND Active = 1
SELECT @TotalUsers = Count(*) FROM {databaseOwner}{objectQualifier}Users AS U  WITH (NOLOCK) INNER JOIN
                      {databaseOwner}{objectQualifier}UserPortals AS UP WITH (NOLOCK) ON U.UserID = UP.UserId
WHERE     (UP.Authorised = 1) AND (UP.PortalId = @PortalId)
SELECT @TotalActiveUsers = Count(*) FROM {databaseOwner}{objectQualifier}activeforums_UserProfiles WITH (NOLOCK) WHERE PortalId = @PortalId AND DATEDIFF(dd,GETUTCDATE(),DateLastActivity) < 30
SELECT @TotalForums as TotalForums, @TotalTopics as TotalTopics, @TotalReplies as TotalReplies, @TotalUsers as TotalMembers, @TotalActiveUsers as TotalActiveMembers

END

GO



/*activeforums_Replies_UpdateStatus*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Replies_UpdateStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Replies_UpdateStatus]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Replies_UpdateStatus]
@PortalId int,
@ModuleId int,
@TopicId int,
@ReplyId int,
@UserId int,
@StatusId int,
@IsMod bit = 0
AS
IF EXISTS(SELECT c.AuthorId FROM {databaseOwner}{objectQualifier}activeforums_topics as t inner join {databaseOwner}{objectQualifier}activeforums_content as c ON c.ContentId = t.ContentId WHERE c.AuthorId = @UserId AND t.TopicId =@TopicId) OR @IsMod = 1
BEGIN
	UPDATE  {databaseOwner}{objectQualifier}activeforums_Replies
	SET		StatusId = @StatusId
	WHERE ReplyId = @ReplyId AND TopicId = @TopicId
	UPDATE	{databaseOwner}{objectQualifier}activeforums_Topics
	SET		StatusId = 3
	WHERE TopicId = @TopicId

DECLARE @PointValue int
DECLARE @AuthorAnswer int
	SET @AuthorAnswer = (SELECT c.AuthorId FROM {databaseOwner}{objectQualifier}activeforums_replies as r inner join {databaseOwner}{objectQualifier}activeforums_content as c ON c.ContentId = r.ContentId WHERE r.TopicId =@TopicId AND r.ReplyId = @ReplyId)
	SET @PointValue = 0
	SELECT @PointValue = SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'MARKANSWERPOINTVALUE' AND ModuleId = @ModuleId
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles
	SET RewardPoints = RewardPoints + @PointValue
	WHERE UserId = @UserId AND PortalId = @PortalId 
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles
	SET AnswerCount = AnswerCount + @PointValue
	WHERE UserId = @AuthorAnswer AND PortalId = @PortalId
END
GO

/*activeforums_Topics_UpdateStatus*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_UpdateStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_UpdateStatus]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_UpdateStatus]
@PortalId int,
@ModuleId int,
@TopicId int,
@ReplyId int,
@TopicStatusId int,
@ReplyStatusId int,
@UserId int = -1
AS

UPDATE {databaseOwner}{objectQualifier}activeforums_Topics SET StatusId = @TopicStatusId WHERE TopicId = @TopicId
If @ReplyId > 0 AND @TopicStatusId = 3
	BEGIN
	UPDATE {databaseOwner}{objectQualifier}activeforums_Replies SET StatusId = @ReplyStatusId WHERE ReplyId = @ReplyId
	DECLARE @ReplyAuthorId int
	SELECT @ReplyAuthorId = C.AuthorId FROM {databaseOwner}{objectQualifier}activeforums_Replies as R INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as C ON c.ContentId = R.ContentId WHERE R.ReplyId = @ReplyId AND R.TopicId = @TopicId
	IF @ReplyAuthorId > 0 
		BEGIN
		DECLARE @ProvideAnswer int
		SELECT @ProvideAnswer = SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = @ModuleId AND SettingName = 'ANSWERPOINTVALUE'
		UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles SET RewardPoints = (RewardPoints + @ProvideAnswer), AnswerCount = (AnswerCount + 1) WHERE UserId = @ReplyAuthorId AND PortalId = @PortalId 
		END
	END
IF @TopicStatusId = 3 AND EXISTS(SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Topics as T INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as C ON c.ContentId = T.ContentId WHERE TopicId = @TopicId AND AuthorId = @UserId)
	BEGIN
		DECLARE @MarkAnswer int
		SELECT @MarkAnswer = SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = @ModuleId AND SettingName = 'MARKANSWERPOINTVALUE'
		UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles SET RewardPoints = (RewardPoints + @MarkAnswer) WHERE UserId = @UserId AND PortalId = @PortalId 
	END

GO


/*activeforums_UserProfiles_GetUsersOnline*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUsersOnline]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUsersOnline]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUsersOnline]
@PortalId int,
@Interval int
AS
SELECT    DATEDIFF(mi, P.DateLastActivity, GETUTCDATE()), U.UserID, U.Username, U.FirstName, U.LastName, U.Email, U.DisplayName, P.PortalId
FROM	{databaseOwner}{objectQualifier}activeforums_UserProfiles AS P INNER JOIN
        {databaseOwner}{objectQualifier}Users AS U ON P.UserId = U.UserID
WHERE     (P.PortalId = @PortalId) AND (DATEDIFF(mi, P.DateLastActivity, GETUTCDATE()) < @Interval)
GO

/* issue 929 - end - combine CanEdit / CanModLock in activeforums_Permissions */

/*activeforums_UserProfiles_Stats*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Stats]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Stats]
@PortalId int,
@Interval int
AS
DECLARE @Guests int
SET @Guests = (SELECT Count(*) FROM {databaseOwner}{objectQualifier}AnonymousUsers WHERE PortalId = @PortalId and (DATEDIFF(mi, LastActiveDate, GETUTCDATE()) < @Interval))

DECLARE @Members int
SET @Members = (SELECT Count(*) FROM {databaseOwner}{objectQualifier}activeforums_UserProfiles WHERE PortalId = @PortalId AND DATEDIFF(mi, DateLastActivity, GETUTCDATE()) < @Interval)
DECLARE @MembersTotal int
SET @MembersTotal = (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Users AS U INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS P ON U.UserID = P.UserId WHERE PortalId = @PortalId AND Authorised = 1)

SELECT IsNull(@Guests,0) as Guests, IsNull(@Members,0) as Members, IsNull(@MembersTotal, 0) as MembersTotal
GO



/* activeforums_UserProfiles -- remove columns no longer used */

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}activeforums_UserProfiles_PrefUseAjax]') AND type = 'D')
ALTER TABLE {databaseOwner}{objectQualifier}activeforums_UserProfiles DROP CONSTRAINT DF_{objectQualifier}activeforums_UserProfiles_PrefUseAjax
GO 
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'PrefUseAjax' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN PrefUseAjax
GO 
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'AOL' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN AOL
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'ICQ' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN ICQ
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'MSN' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN MSN
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'Yahoo' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN Yahoo
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'Occupation' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN Occupation
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'Location' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN Location
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'Interests' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN Interests
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'WebSite' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN WebSite
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}activeforums_UserProfiles_Bio]') AND type = 'D')
ALTER TABLE {databaseOwner}{objectQualifier}activeforums_UserProfiles DROP CONSTRAINT DF_{objectQualifier}activeforums_UserProfiles_Bio
GO 
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'Bio' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN Bio
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'Badges' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN Badges
GO
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'ModuleId' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP COLUMN ModuleId
GO



/* activeforums_UserProfiles - add FK and cascade delete from UserPortals */
IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}activeforums_UserProfiles_UserPortals]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] DROP CONSTRAINT 
[FK_{objectQualifier}activeforums_UserProfiles_UserPortals]
GO

/* remove orphaned activeforums_UserProfiles records */
DELETE up1 
FROM {databaseOwner}[{objectQualifier}activeforums_UserProfiles] up1
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}UserPortals] up2 
ON up2.PortalId = up1.PortalId
and up2.UserId = up1.UserId
WHERE up2.UserId IS NULL
GO

ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_UserProfiles] ADD CONSTRAINT
	[FK_{objectQualifier}activeforums_UserProfiles_UserPortals] FOREIGN KEY (UserId, PortalId) 
	REFERENCES {databaseOwner}[{objectQualifier}UserPortals] (UserId, PortalId) 
	ON DELETE CASCADE 
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TopicsList]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_TopicsList]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopMembers]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_TopMembers]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]';
GO

/* issue 761 + 1006 end: activeforums_UserProfiles remove unneeded user preferences + remove ModuleId; add FK to PortalUsers  */


/* --------------------- */



/* --------------------- */

/* issue 926 - begin - combine CanLock / CanModLock in activeforums_Permissions */

IF EXISTS(SELECT * FROM SYS.COLUMNS WHERE Name = N'CanModLock' and Object_ID = Object_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))    
BEGIN 
	exec sp_sqlexec 'UPDATE {databaseOwner}[{objectQualifier}activeforums_Permissions]
	SET CanLock = RTRIM(CanLock) + ''::::'' + RTRIM(CanModLock)
	WHERE RTRIM(CanModLock) <> '''' 
	OR CanModLock IS NOT NULL'
END
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModLock' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] DROP COLUMN CanModLock
GO

/* issue 926 - end - combine CanLock / CanModLock in activeforums_Permissions */


/* --------------------- */

/* issue 927 - begin - combine CanPin / CanModPin in activeforums_Permissions */

IF EXISTS(SELECT * FROM SYS.COLUMNS WHERE Name = N'CanModPin' and Object_ID = Object_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))    
BEGIN 
	exec sp_sqlexec 'UPDATE {databaseOwner}[{objectQualifier}activeforums_Permissions]
	SET CanPin = RTRIM(CanPin) + ''::::'' + RTRIM(CanModPin)
	WHERE RTRIM(CanModPin) <> '''' 
	OR CanModPin IS NOT NULL'
END
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModPin' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] DROP COLUMN CanModPin
GO

/* issue 927 - end - combine CanPin / CanModPin in activeforums_Permissions */

/* --------------------- */

/* issue 928 - begin - combine CanDelete / CanModDelete in activeforums_Permissions */
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModDelete' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
BEGIN
	exec sp_sqlexec 'UPDATE {databaseOwner}[{objectQualifier}activeforums_Permissions]
	SET CanDelete = RTRIM(CanDelete) + ''::::'' + RTRIM(CanModDelete)
	WHERE RTRIM(CanModDelete) <> '''' 
	OR CanModDelete IS NOT NULL'
END
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModDelete' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] DROP COLUMN CanModDelete
GO

/* issue 928 - end - combine CanDelete / CanModDelete in activeforums_Permissions */

/* --------------------- */

/* issue 929 - begin - combine CanEdit / CanModEdit in activeforums_Permissions */

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModEdit' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
BEGIN
	exec sp_sqlexec 'UPDATE {databaseOwner}[{objectQualifier}activeforums_Permissions]
	SET CanEdit = RTRIM(CanEdit) + ''::::'' + RTRIM(CanModEdit)
	WHERE RTRIM(CanModEdit) <> '''' 
	OR CanModEdit IS NOT NULL'
END
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModEdit' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions] DROP COLUMN CanModEdit
GO

/* issue 929 - end - combine CanEdit / CanModLock in activeforums_Permissions */


/* --------------------- */
/* issue 930 - begin - Rename CanModApprove -> CanModerate, CanModMove -> CanMove, CanModSplit -> CanSplit, CanModUser -> CanBan in activeforums_Permissions */

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModApprove' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
exec sp_rename '{databaseOwner}{objectQualifier}activeforums_Permissions.CanModApprove', 'CanModerate', 'COLUMN'
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModMove' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
exec sp_rename '{databaseOwner}{objectQualifier}activeforums_Permissions.CanModMove', 'CanMove', 'COLUMN'
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModSplit' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
exec sp_rename '{databaseOwner}{objectQualifier}activeforums_Permissions.CanModSplit', 'CanSplit', 'COLUMN'
GO

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'CanModUser' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]'))
exec sp_rename '{databaseOwner}{objectQualifier}activeforums_Permissions.CanModUser', 'CanBan', 'COLUMN'
GO

/* issue 929 - end - Rename ModApprove -> CanModerate, CanModMove -> CanMove, CanModSplit -> CanSplit, CanModUser -> CanBan in activeforums_Permissions */



/* issue 1026 begin - DAL2 updates for activeforums_ForumTopics */

/* drop procedure activeforums_ForumContent_List - no longer used */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumContent_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumContent_List]
GO

/* drop procedure activeforums_TopicsList - no longer used  */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TopicsList]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TopicsList]
GO

/* drop procedure activeforums_ForumGetByTopicId - no longer used  */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumGetByTopicId]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumGetByTopicId]
GO

/* Begin - update activeforums_Reply_Save procedure to remove update to LastReplyDate in activeforums_ForumTopics */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Reply_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Save]
GO
 
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Save]
@PortalId int,
@TopicId int,
@ReplyId int,
@ReplyToId int,
@StatusId int,
@IsApproved bit,
@IsDeleted bit,
@Subject nvarchar(255),
@Body ntext,
@DateCreated datetime,
@DateUpdated datetime,
@AuthorId int,
@AuthorName nvarchar(150),
@IPAddress nvarchar(50)
AS
DECLARE @ContentId int
DECLARE @IsEdit bit
SET @IsEdit = 0
DECLARE @ApprovedStatus bit
SET @ApprovedStatus = @IsApproved

-- This part is a work around for Quick Reply feature not working for Tapatalk STARTS

DECLARE @TopicSubject NVARCHAR(255) =	(
											SELECT top 1 afc.Subject FROM {databaseOwner}[{objectQualifier}activeforums_Topics] aft
												JOIN {databaseOwner}[{objectQualifier}activeforums_Content] afc ON aft.ContentId = afc.ContentId
											WHERE TopicId = @TopicId
										)	
										
SET @Subject = ISNULL(NULLIF(@Subject, ''), 'RE: ' + @TopicSubject)	

IF (@Subject NOT LIKE 'RE:%')
BEGIN
	SET @Subject = 'RE: ' + @Subject
END
-- This part is a work around for Quick Reply feature not working for Tapatalk ENDS


IF EXISTS(SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE ReplyId = @ReplyId)
	BEGIN
		SELECT @ContentId = ContentId, @ApprovedStatus = IsApproved FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE ReplyId = @ReplyId
		
		BEGIN
			SET @IsEdit = 1
			UPDATE {databaseOwner}{objectQualifier}activeforums_Content
				SET Subject = @Subject,
					Body = @Body,
					DateCreated = @DateCreated,
					DateUpdated = @DateUpdated,
					AuthorId = @AuthorId,
					AuthorName = @AuthorName,
					IsDeleted = @IsDeleted,
					IPAddress = @IPAddress
				WHERE ContentId = @ContentId
			UPDATE {databaseOwner}{objectQualifier}activeforums_Replies
				SET StatusId = @StatusId,
					TopicId = @TopicId,
					IsApproved = @IsApproved,
					IsDeleted = @IsDeleted,
					ReplyToId = @ReplyToId					
				WHERE ReplyId = @ReplyId	
		END
	END
ELSE
--INSERT
BEGIN
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Content
			(Subject, Body, DateCreated, DateUpdated, AuthorId, AuthorName, IsDeleted, IPAddress)
			VALUES
			(@Subject, @Body, @DateCreated, @DateUpdated, @AuthorId, @AuthorName, @IsDeleted, @IPAddress)
		SET @ContentId = SCOPE_IDENTITY()
	END
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Replies
			(ContentId, TopicId, StatusId, IsApproved, IsDeleted, ReplyToId)
			VALUES
			(@ContentId, @TopicId, @StatusId, @IsApproved, @IsDeleted, @ReplyToId)
		SET @ReplyId = SCOPE_IDENTITY()
		
	END
	

END
IF @IsApproved = 1
	BEGIN
		DECLARE @ForumId int
		SELECT @ForumId = ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId
		DECLARE @TotalReplies int
		SET @TotalReplies = (SELECT Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_replies as r inner join {databaseOwner}{objectQualifier}activeforums_topics as t on t.topicid = r.topicid and r.isapproved = 1 and r.isdeleted = 0 INNER JOIN {databaseOwner}{objectQualifier}activeforums_forumtopics as ft on t.topicid = ft.topicid WHERE ft.forumid = @ForumId)
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums 
		SET LastPostSubject = @Subject, LastPostAuthorName = @AuthorName, LastPostAuthorId = IsNull(@AuthorId,-1), 
			LastPostDate = @DateCreated, LastTopicId = IsNull(@TopicId,0), LastReplyId = IsNull(@ReplyId,0),
			TotalReplies = ISNULL(@TotalReplies,0)
		WHERE ForumId = @ForumId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
			WHERE TopicId = @TopicId
		IF @AuthorId > 0
			UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles 
				SET ReplyCount = ISNULL((Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies as r INNER JOIN 
						{databaseOwner}{objectQualifier}activeforums_Content as c ON r.ContentId = c.ContentId AND c.AuthorId=@AuthorId INNER JOIN
						{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft ON ft.TopicId = r.TopicId INNER JOIN
						{databaseOwner}{objectQualifier}activeforums_Forums as f ON ft.ForumId = f.ForumId
						WHERE r.IsApproved = 1 AND r.IsDeleted=0 AND f.PortalId=@PortalId),0)
				WHERE UserId = @AuthorId AND PortalId = @PortalId						
		
	END


/* populate ModuleId in activeforums_Content */
UPDATE c
SET c.ModuleId = f.ModuleId
FROM {databaseOwner}[{objectQualifier}activeforums_Content] c 
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Replies] r
ON r.ContentId = c.ContentId 
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] ft 
ON ft.TopicId = r.TopicId
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] f 
ON f.ForumId = ft.ForumId
WHERE c.ModuleId IS NULL AND r.ReplyId = @ReplyId


SELECT @ReplyId
GO
/* End - update activeforums_Reply_Save procedure to remove update to LastReplyDate & LastTopicDate in activeforums_ForumTopics  */



/* Begin - update activeforums_Topics_SaveToForum procedure to remove update to LastReplyDate in activeforums_ForumTopics */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]
@ForumId int,
@TopicId int,
@LastReplyId int
AS
BEGIN
DECLARE @LastPostId int 
DECLARE @tmpLastPostId int
SET @LastPostId = 0
SET @tmpLastPostId = -1
DECLARE @Subject nvarchar(250)
DECLARE @AuthorName nvarchar(150)
DECLARE @AuthorId int
DECLARE @PostDate datetime
DECLARE @LastTopicId int
DECLARE @ReplyId int

IF EXISTS (SELECT TopicId FROM {databaseOwner}[{objectQualifier}activeforums_ForumTopics] WHERE ForumId = @ForumId AND TopicId = @TopicId)
	BEGIN
			
		IF @LastReplyId > 0
			BEGIN
			SET @tmpLastPostId = (SELECT MAX(ReplyId) from {databaseOwner}[{objectQualifier}activeforums_Replies] WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
			UPDATE {databaseOwner}[{objectQualifier}activeforums_ForumTopics]
			SET LastReplyId = @tmpLastPostId
			 WHERE ForumId = @ForumId AND TopicId = @TopicId


			END
	END
ELSE
	BEGIN
	
	IF @LastReplyId = -1
		SET @LastReplyId = Null
		INSERT INTO {databaseOwner}[{objectQualifier}activeforums_ForumTopics]
			(ForumId, TopicId, LastReplyId)
			VALUES
			(@ForumId, @TopicId, @LastReplyId)

		/* populate ModuleId in activeforums_Content */
		UPDATE c
		SET c.ModuleId =  f.ModuleId
		FROM {databaseOwner}[{objectQualifier}activeforums_Content] c 
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Topics] t
		ON t.ContentId = c.ContentId 
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] ft 
		ON ft.TopicId = t.TopicId
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] f 
		ON f.ForumId = ft.ForumId
		WHERE c.ModuleId IS NULL AND t.TopicId = @TopicId
		
	END
END


GO
 
/* End - update activeforums_Topics_SaveToForum procedure to remove update to LastReplyDate & LastTopicDate in activeforums_ForumTopics */





/* Begin - update activeforums_UI_TopicsDisplay procedure to remove LastPostDate */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]
@PortalId int,
@ModuleId int,
@ForumId int,
@UserId int,
@RowIndex int = 0, 
@MaxRows int = 20,
@IsSuperUser bit = 0,
@SortColumn nvarchar(25) = 'ReplyCreated',
@ForumIds nvarchar(1000) = ''
AS
IF @ForumIds = '' AND @ForumId > 0
	BEGIN
SELECT ForumId, TopicId, LastReplyId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce,
		AnnounceStart, AnnounceEnd, TopicType, Body, [Subject], Summary, AuthorId, AuthorName, Username, Firstname, LastName,
		DisplayName, DateCreated, LastPostDate, UserLastReplyRead, UserLastTopicRead, TopicRating, P.*
		FROM (
			SELECT     f.ForumId, t.TopicId, IsNull(f.LastReplyId,0) as LastReplyId, t.ViewCount, t.ReplyCount, 
			t.IsLocked, t.IsPinned, t.TopicIcon, t.StatusId, t.IsAnnounce, 
			t.AnnounceStart, t.AnnounceEnd, t.TopicType, c.Body, c.Subject, c.Summary, c.AuthorId, c.AuthorName, u.Username, u.FirstName, 
			u.LastName, u.DisplayName, c.DateCreated,COALESCE(rc.DateCreated,c.DateCreated) as LastPostDate,
			CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
			CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
				(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
			 ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN rc.DateCreated
									WHEN @SortColumn = 'TopicCreated' THEN c.DateCreated END DESC) as RowRank
			FROM      {databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Topics AS t ON f.TopicId = t.TopicId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS c ON t.ContentId = c.ContentId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS u ON c.AuthorId = u.UserID LEFT OUTER JOIN				
					  {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId LEFT OUTER JOIN 
                      {databaseOwner}{objectQualifier}activeforums_Replies as r ON r.ReplyId = f.LastReplyId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS rc ON c.ContentId = r.ContentId
			WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0)	
			) as topics INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as P on P.PermissionsId = topics.ForumId
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
END
Else

	BEGIN
SELECT topics.ForumId, ff.ForumName,g.GroupName, TopicId, topics.LastReplyId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce,
		AnnounceStart, AnnounceEnd, TopicType, Body, [Subject], Summary, AuthorId, AuthorName, Username, Firstname, LastName,
		DisplayName, topics.DateCreated, topics.LastPostDate, UserLastReplyRead, UserLastTopicRead, TopicRating, P.*
		FROM (
			SELECT     f.ForumId, t.TopicId, IsNull(f.LastReplyId,0) as LastReplyId, t.ViewCount, t.ReplyCount, 
			t.IsLocked, t.IsPinned, t.TopicIcon, t.StatusId, t.IsAnnounce, 
			t.AnnounceStart, t.AnnounceEnd, t.TopicType, c.Body, c.Subject, c.Summary, c.AuthorId, c.AuthorName, u.Username, u.FirstName, 
			u.LastName, u.DisplayName, c.DateCreated,COALESCE(rc.DateCreated,c.DateCreated) as LastPostDate,
			CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
			CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
				(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
			 ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN rc.DateCreated
									WHEN @SortColumn = 'TopicCreated' THEN c.DateCreated END DESC) as RowRank
			FROM      {databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fs ON fs.id = f.ForumId INNER JOIN
					  
                      {databaseOwner}{objectQualifier}activeforums_Topics AS t ON f.TopicId = t.TopicId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS c ON t.ContentId = c.ContentId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS u ON c.AuthorId = u.UserID LEFT OUTER JOIN				
					  {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId LEFT OUTER JOIN 
                      {databaseOwner}{objectQualifier}activeforums_Replies as r ON r.ReplyId = f.LastReplyId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS rc ON rc.ContentId = r.ContentId
			WHERE     (t.IsApproved = 1 AND t.IsDeleted = 0)	
			) as topics INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as ff ON topics.ForumId = ff.ForumId INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as P on P.PermissionsId = topics.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on g.ForumGroupId = ff.ForumGroupId
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	END
BEGIN
If @UserId > 0
	BEGIN
If @ForumId > 0
	BEGIN
	exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId
	END
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @ModuleId, @UserId
	END
END

GO


/* End - update activeforums_UI_TopicsDisplay procedure to remove LastPostDate */

/* Begin - update activeforums_UI_MyTopicsView procedure to remove LastReplyDate */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@ForumIds nvarchar(1000)
AS

	SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	-- Get a List of all the topic ids the user has participated in

	DECLARE @TopicIds TABLE ( TopicId int NOT NULL )

	INSERT INTO @TopicIds
	SELECT DISTINCT T.TopicId from {databaseOwner}{objectQualifier}activeforums_Topics AS T INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Content AS C ON C.ContentId = T.ContentId AND C.AuthorId = @UserId AND T.IsApproved = 1 and T.IsDeleted = 0 INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_ForumTopics AS FT ON T.TopicId = FT.TopicId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums AS F ON FT.ForumId = F.ForumId AND F.ModuleId = @ModuleId and F.PortalId = @PortalId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as FL ON FL.id = F.ForumId
	UNION
	SELECT DISTINCT T.TopicId from {databaseOwner}{objectQualifier}activeforums_Replies as r INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Content AS C ON C.ContentId = R.ContentId AND C.AuthorId = @UserId AND R.IsApproved = 1 AND R.IsDeleted = 0 INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Topics AS T ON R.TopicId = T.TopicId AND T.IsApproved = 1 AND T.IsDeleted = 0 INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_ForumTopics AS FT ON T.TopicId = FT.TopicId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums AS F ON FT.ForumId = F.ForumId AND F.ModuleId = @ModuleId and F.PortalId = @PortalId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as FL ON FL.id = F.ForumId

	-- Dedupe the topics list
	CREATE TABLE #ParticipatedTopicIds(TopicId int NOT NULL)
	
	INSERT INTO #ParticipatedTopicIds(TopicId)
	SELECT DISTINCT TopicId 
	FROM @TopicIds

	-- Populate our participated topics table
	CREATE TABLE #ParticipatedTopics(RowRank int NOT NULL, TopicId int NOT NULL)

	INSERT INTO #ParticipatedTopics(RowRank, TopicId)
	SELECT ROW_NUMBER() OVER (
			ORDER BY 
				CASE 
					WHEN @Sort = 'DESC' THEN rc.DateCreated END DESC, 
				CASE  
					WHEN @Sort = 'ASC' THEN rc.DateCreated END ASC) as RowRank, 
		T.TopicId
	FROM {databaseOwner}{objectQualifier}activeforums_Topics T INNER JOIN
		#ParticipatedTopicIds PT ON T.TopicId = PT.TopicId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_ForumTopics F on F.TopicId = T.TopicId LEFT OUTER JOIN 
                      {databaseOwner}{objectQualifier}activeforums_Replies as r ON r.ReplyId = F.LastReplyId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS rc ON rc.ContentId = r.ContentId

	DECLARE @RecordCount int
	SET @RecordCount = (SELECT COUNT(*) FROM #ParticipatedTopics)

	SELECT 
		f.ForumId,
		f.ForumName,
		IsNull(f.LastReplyId,0) as LastReplyId,
		t.TopicId,
		t.ViewCount,
		t.ReplyCount,
		t.IsLocked,
		t.IsPinned,
		IsNull(t.TopicIcon,'') as TopicIcon,
		t.StatusId,
		t.IsAnnounce,
		t.AnnounceStart,
		t.AnnounceEnd,
		t.TopicType,
		c.Subject,
		IsNull(c.Summary,'') as Summary,
		IsNull(c.AuthorId,-1) as AuthorId,
		IsNull(c.AuthorName,'') as AuthorName,
		c.Body,
		c.DateCreated,
		IsNull(u.Username,'') as AuthorUserName,
		IsNull(u.FirstName,'') as AuthorFirstName,
		IsNull(u.LastName,'') as AuthorLastName,
		IsNull(u.DisplayName,'') as AuthorDisplayName,
		CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
		CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
		CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
		CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
		CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
		CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
		CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
		CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
		CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
		CASE WHEN TT.LastReplyId < ISNULL(f.LastReplyId,0) THEN TT.LastReplyId ELSE 0 END AS LastReplyRead, 
		CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
		CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
		CASE WHEN ftt.LastReplyID <= tt.LastReplyId OR (ISNULL(ftt.LastReplyId,'') = 0 AND c.AuthorId = @UserId) OR (FT.MaxReplyRead >= ftt.LastReplyId) THEN 1 ELSE 0 END AS IsRead,
		ftt.LastReplyId as TopicLastReplyId,
		tr.TopicRating, 
		@RecordCount as RecordCount,
		ISNULL(t.URL,'') as  TopicURL,
		ISNULL(f.PrefixURL,'') as ForumUrl,
		ISNULL(g.PrefixURL,'') as GroupUrl,
		g.ForumGroupId,
		IsNull(S.Mode,0) AS SubscriptionType
		
		FROM	#ParticipatedTopics as tmp INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on tmp.TopicId = t.TopicId INNER JOIN			
				{databaseOwner}{objectQualifier}activeforums_ForumTopics AS ftt ON ftt.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_forums as f ON ftt.forumId = f.ForumId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Groups as g ON f.ForumGroupId = g.ForumGroupId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}vw_activeforums_TopicRatings as tr on t.TopicId = tr.TopicId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on ftt.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Subscriptions AS S ON S.ForumId = f.ForumId AND S.TopicId = T.TopicId and S.UserId = @UserId
				
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	ORDER BY RowRank

	DROP TABLE #ParticipatedTopicIds
	DROP TABLE #ParticipatedTopics
GO

/* End - update activeforums_UI_MyTopicsView procedure to remove LastReplyDate */


/* Begin - restructure table; drop unused columns; drop composite primary key not supported by DAL2; add identity primary key */

IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'LastPostDate' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP COLUMN LastPostDate
GO 
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'LastPostData' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP COLUMN LastPostData
GO 
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'LastTopicDate' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP COLUMN LastTopicDate
GO 
IF EXISTS(SELECT * FROM sys.columns WHERE [name] = N'LastReplyDate' AND [object_id] = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))
ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP COLUMN LastReplyDate
GO 

IF (OBJECT_ID(N'{databaseOwner}[PK_{objectQualifier}activeforums_ForumTopics]', 'PK') IS NOT NULL)
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] DROP CONSTRAINT [PK_{objectQualifier}activeforums_ForumTopics]
END
GO

IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE Name = N'ForumTopicId' and Object_ID = Object_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumTopics]'))    
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] 
		ADD ForumTopicId INT IDENTITY(1,1)
END
GO
IF (OBJECT_ID(N'{databaseOwner}[PK_{objectQualifier}activeforums_ForumTopics]', 'PK') IS NOT NULL)
BEGIN
    ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_ForumTopics] 
	    ADD CONSTRAINT [PK_{objectQualifier}activeforums_ForumTopics] PRIMARY KEY CLUSTERED ( [ForumTopicId] ASC  ) 
		    WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
END
GO

/* End - restructure table; drop unused columns; drop composite primary key not supported by DAL2; add identity primary key */

/* refresh affected objects */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Content_GetJournalKeysForUser]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Content_GetJournalKeysForUser]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_DashBoard_Stats]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_DashBoard_Stats]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumGetByTopicId]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_ForumGetByTopicId]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_Delete]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Forums_Delete]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_LastUpdates]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Forums_LastUpdates]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Groups_Delete]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Groups_Delete]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Reply_Save]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Reply_Save]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Search_GetSearchItemsFromBegDate]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Search_GetSearchItemsFromBegDate]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topic_GetPrevNext]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Topic_GetPrevNext]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TopicIdByURL]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_TopicIdByURL]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_List]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Topics_List]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TopicWithReplies]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_TopicWithReplies]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TP_GetByUser]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_TP_GetByUser]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TagCloud]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_TagCloud]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_URL_Search]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_URL_Search]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Util_MarkAsRead]') AND type in (N'P', N'PC'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}activeforums_Util_MarkAsRead]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_List]') AND type in (N'F', N'FN'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[fn_{objectQualifier}activeforums_GetURL]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_List]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[vw_{objectQualifier}activeforums_ForumTopics]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_List]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[vw_{objectQualifier}activeforums_TopicViewForSearch]';
GO

/* issue 1026 end - DAL2 updates for activeforums_ForumTopics  */

/* --------------------- */

/* issue 1032 begin - update forums_tracking */

/*activeforums_Topics_Tracking_UpdateUser*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_Tracking_UpdateUser]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Tracking_UpdateUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Tracking_UpdateUser]
	@ForumId int,
	@TopicId int,
	@LastReplyId int,
	@UserId int
	
AS
IF EXISTS(SELECT TrackingId FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tracking WHERE UserId = @UserId AND ForumId = @ForumId AND TopicId = @TopicId)
	UPDATE {databaseOwner}{objectQualifier}activeforums_Topics_Tracking
		SET DateAdded = GETUTCDATE(), LastReplyId = @LastReplyId
		WHERE UserId = @UserId AND ForumId = @ForumID AND TopicId = @TopicId
ELSE
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_Topics_Tracking
		(ForumId, TopicId, LastReplyId, UserId,DateAdded)
		VALUES
		(@ForumId, @TopicId, @LastReplyId, @UserId, GETUTCDATE())

IF EXISTS(SELECT TrackingId FROM {databaseOwner}{objectQualifier}activeforums_Forums_Tracking WHERE UserId = @UserId AND ForumId = @ForumId)
	UPDATE {databaseOwner}{objectQualifier}activeforums_Forums_Tracking
    SET LastAccessDate = GETUTCDATE(), MaxTopicRead = CASE WHEN MaxTopicRead > @TopicId THEN MaxTopicRead ELSE @TopicId END, MaxReplyRead = CASE WHEN MaxReplyRead > @LastReplyId THEN MaxReplyRead ELSE @LastReplyId END 
	WHERE UserId = @UserId AND ForumId = @ForumID AND (MaxTopicRead < @TopicId OR MaxReplyRead < @LastReplyId)
ELSE
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_Forums_Tracking
	(ModuleId, UserId, ForumId, LastAccessDate, MaxTopicRead, MaxReplyRead)
	SELECT ModuleId, @UserId, @ForumId, GETUTCDATE(), @TopicId, @LastReplyId 
    FROM {databaseOwner}{objectQualifier}activeforums_Forums 
    WHERE ForumId = @ForumId

GO

/* backfill missing data */
UPDATE ft SET MaxReplyRead = COALESCE(tt.LastReplyId,0), MaxTopicRead = tt.MaxTopicId
FROM {databaseOwner}{objectQualifier}activeforums_Forums_Tracking ft
LEFT OUTER JOIN (
	SELECT UserId, ForumId, MAX(TopicId) AS MaxTopicId, MAX(LastReplyId) AS LastReplyId 
    FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tracking 
    GROUP BY UserId, ForumId
	) tt
	ON tt.UserId = ft.UserId 
    AND tt.ForumId = ft.forumId 
    WHERE tt.UserId IS NOT NULL

/* issue 1032 end - update forums_tracking */

/* --------------------- */




/* issue 1037 begin - topic / reply splitting issues */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Replies_Split]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Replies_Split]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Replies_Split]
@OldTopicId int,
@NewTopicId int,
@listreplies varchar(8000),
@DateUpdated datetime,
@FirstReplyId int
AS
BEGIN
    DECLARE @ReplyIds TABLE (id int)
	DECLARE @OldForumId int
    DECLARE @NewForumId int
    SELECT @OldForumId = ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @OldTopicId
    SELECT @NewForumId = ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @NewTopicId
	DECLARE @MaxReplyId int
    DECLARE @TotalReplies int

	IF @listreplies <> ''
	BEGIN
		INSERT INTO @ReplyIds (id) SELECT id FROM {databaseOwner}{objectQualifier}activeforums_Functions_Split(@listreplies,'|')
    
		UPDATE {databaseOwner}{objectQualifier}activeforums_Content
		SET DateCreated = @DateUpdated, DateUpdated = @DateUpdated
		WHERE ContentId in (SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @OldTopicId AND ReplyId in (SELECT id FROM @ReplyIds))
    
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = NULL
			WHERE TopicId = @OldTopicId     
		
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = NULL
			WHERE TopicId = @NewTopicId

		UPDATE {databaseOwner}{objectQualifier}activeforums_Replies
		SET TopicId = @NewTopicId
		WHERE TopicId = @OldTopicId AND ReplyId in (SELECT id FROM @ReplyIds)
		
		SELECT @MaxReplyId = Max(ReplyId),@TotalReplies = Count(ReplyId) FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @OldTopicId AND IsDeleted = 0 AND IsApproved = 1
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = @TotalReplies
			WHERE TopicId = @OldTopicId
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = @MaxReplyId
			WHERE TopicId = @OldTopicId 
            AND @MaxReplyId <> 0
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = @MaxReplyId
			WHERE TopicId = @OldTopicId     
		SELECT @MaxReplyId = Max(ReplyId),@TotalReplies = Count(ReplyId) FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @NewTopicId AND IsDeleted = 0 AND IsApproved = 1
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = @TotalReplies
			WHERE TopicId = @NewTopicId
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = @MaxReplyId
			WHERE TopicId = @NewTopicId
	END
	IF @FirstReplyId > 0
	BEGIN
		DECLARE @Body NVARCHAR(MAX)
		DECLARE @Summary NVARCHAR(1000)
		DECLARE @NewContentId int
		DECLARE @OldContentId int
		SELECT @NewContentId = ContentId FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @NewTopicId
		SELECT @OldContentId = ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @OldTopicId AND ReplyId = @FirstReplyId
		SELECT @Body = Body, @Summary = Summary FROM {databaseOwner}{objectQualifier}activeforums_Content WHERE ContentId = @OldContentId
		
		UPDATE {databaseOwner}{objectQualifier}activeforums_Content
		SET Body = @Body, Summary = @Summary
		WHERE ContentId = @NewContentId

		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = NULL
			WHERE TopicId = @OldTopicId     
		
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = NULL
			WHERE TopicId = @NewTopicId

		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @OldTopicId AND ReplyId = @FirstReplyId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Content WHERE ContentId = @OldContentId 

		SELECT @MaxReplyId = Max(ReplyId),@TotalReplies = Count(ReplyId) FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @OldTopicId AND IsDeleted = 0 AND IsApproved = 1
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = @TotalReplies
			WHERE TopicId = @OldTopicId
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = @MaxReplyId
			WHERE TopicId = @OldTopicId     
		SELECT @MaxReplyId = Max(ReplyId),@TotalReplies = Count(ReplyId) FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @NewTopicId AND IsDeleted = 0 AND IsApproved = 1
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = @TotalReplies
			WHERE TopicId = @NewTopicId
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = @MaxReplyId
			WHERE TopicId = @NewTopicId

	END
	
    exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @OldForumId
    EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @OldForumId
    IF (@OldForumId <> @NewForumId)
    BEGIN
	    exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @NewForumId
	    EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @NewForumId
    END
END
GO





/* issue 1037 end - topic / reply splitting issues */

/* --------------------- */

/* Begin issue 1043 -- update activeforums_SaveTopicNextPrev */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]
	@ForumId INT
AS
BEGIN
	
	SET NOCOUNT ON
	;WITH ctePrevNext AS
	(

		SELECT    
			T.TopicId,
			LAG(T.TopicId,1,NULL) OVER (ORDER BY tc.DateCreated, rc.DateCreated) PrevTopic,
			LEAD(T.TopicId,1,NULL) OVER (ORDER BY tc.DateCreated, rc.DateCreated) NextTopic
		FROM 
			dbo.activeforums_ForumTopics as ft 
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Topics] as t ON t.TopicId = ft.TopicId 
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] as tc on tc.ContentId = t.ContentId 
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Replies] as r on r.ReplyId = ft.LastReplyId 
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] as rc on r.ContentId = rc.ContentId 
		WHERE (ft.ForumId = @ForumId)	
        AND (t.IsDeleted = 0)
	)
	UPDATE 
		t
	SET
		NextTopic = pn.NextTopic,
		PrevTopic = pn.PrevTopic 
	FROM 
		{databaseOwner}[{objectQualifier}activeforums_Topics] t 
		INNER JOIN ctePrevNext pn ON pn.TopicId = t.TopicId   
        WHERE t.IsDeleted = 0
		
	
	/* update the first and last - BY DATE to wraparound */
	DECLARE @MaxTopicId int, @MinTopicId int
	
	;WITH ctePrevNext AS
	(
		SELECT    
			T.TopicId
		FROM {databaseOwner}[{objectQualifier}activeforums_ForumTopics] as ft 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Topics] t ON t.TopicId = ft.TopicId 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] tc on tc.ContentId = t.ContentId 
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Replies] r on  r.ReplyId = ft.LastReplyId 
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] rc on rc.ContentId = r.ContentId 
		WHERE     
			(ft.ForumId = @ForumId)	AND (t.NextTopic IS NULL OR t.PrevTopic IS NULL) AND (t.IsDeleted = 0)
	)	
	SELECT 
		@MaxTopicId = MAX(topicid), 
		@MinTopicId = MIN(topicid) 
	FROM 
		ctePrevNext
        
	
	/* update first */
	UPDATE 
		{databaseOwner}[{objectQualifier}activeforums_Topics]
	SET 
		PrevTopic = @MaxTopicId  
	FROM
		{databaseOwner}[{objectQualifier}activeforums_Topics] t 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] ft ON ft.TopicId = t.TopicId
	WHERE 
		PrevTopic IS NULL 
		AND ft.ForumId = @ForumId
        AND t.IsDeleted = 0

	
	/* update last */
	UPDATE 
		{databaseOwner}[{objectQualifier}activeforums_Topics] 
	SET 
		NextTopic = @MinTopicId 
	FROM
		{databaseOwner}[{objectQualifier}activeforums_Topics] t 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] ft ON ft.TopicId = t.TopicId
	WHERE 
		NextTopic IS NULL 
		AND ft.ForumId = @ForumId
        AND t.IsDeleted = 0

        
	/* clear previous/next from deleted topics */
    UPDATE 
		t
	SET
		NextTopic = 0
	FROM 
		{databaseOwner}[{objectQualifier}activeforums_Topics] t 
        WHERE t.IsDeleted = 1
        AND t.NextTopic <> 0
		
	UPDATE 
		t
	SET
		PrevTopic = 0
	FROM 
		{databaseOwner}[{objectQualifier}activeforums_Topics] t 
        WHERE t.IsDeleted = 1
        AND t.PrevTopic <> 0
		
END
GO

/* execute against existing topics */

DECLARE @ForumId INT
		 
BEGIN
	DECLARE forums_cursor CURSOR FOR SELECT ForumId FROM {databaseOwner}[{objectQualifier}activeforums_Forums] 
	OPEN forums_cursor
		FETCH NEXT FROM forums_cursor into @ForumId
			WHILE (@@fetch_status = 0)
			BEGIN
				EXEC {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev] @ForumId
			FETCH NEXT FROM forums_cursor INTO @ForumId
			END
	CLOSE forums_cursor
	DEALLOCATE forums_cursor
END

/* issue 1043 - End - update activeforums_SaveTopicNextPrev */


/* --------------------- */

/* issue 1100 - Begin - additional indexes */

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Replies') AND name = N'idx_{objectQualifier}activeforums_Replies_Opt3')
DROP INDEX [idx_{objectQualifier}activeforums_Replies_Opt3] ON {databaseOwner}{objectQualifier}activeforums_Replies 
GO
CREATE NONCLUSTERED INDEX [idx_{objectQualifier}activeforums_Replies_Opt3] ON {databaseOwner}{objectQualifier}activeforums_Replies
(
	[ContentId] ASC,
    [ReplyId] ASC
)WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) 
GO
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Topics') AND name = N'idx_{objectQualifier}activeforums_Topics_Opt3')
DROP INDEX [idx_{objectQualifier}activeforums_Topics_Opt3] ON {databaseOwner}{objectQualifier}activeforums_Topics 
GO
CREATE NONCLUSTERED INDEX [idx_{objectQualifier}activeforums_Topics_Opt3] ON {databaseOwner}{objectQualifier}activeforums_Topics 
(
	[ContentId] ASC,
	[TopicId] ASC
)WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) 
GO
/* issue 1100 - End - additional indexes */


/* --------------------- */


/* issue 1042 - begin - mark answer */

/*activeforums_Replies_UpdateStatus*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Replies_UpdateStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Replies_UpdateStatus]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Replies_UpdateStatus]
@PortalId int,
@ModuleId int,
@TopicId int,
@ReplyId int,
@UserId int,
@StatusId int,
@IsMod bit = 0
AS
IF EXISTS(SELECT c.AuthorId FROM {databaseOwner}{objectQualifier}activeforums_topics as t inner join {databaseOwner}{objectQualifier}activeforums_content as c ON c.ContentId = t.ContentId WHERE c.AuthorId = @UserId AND t.TopicId =@TopicId) OR @IsMod = 1
BEGIN
	UPDATE  {databaseOwner}{objectQualifier}activeforums_Replies
	SET		StatusId = @StatusId
	WHERE TopicId = @TopicId AND ReplyId = @ReplyId
    UPDATE  {databaseOwner}{objectQualifier}activeforums_Replies
    SET		StatusId = -1
    WHERE TopicId = @TopicId AND ReplyId <> @ReplyId
	UPDATE	{databaseOwner}{objectQualifier}activeforums_Topics
	SET		StatusId = 3
	WHERE TopicId = @TopicId

DECLARE @PointValue int
DECLARE @AuthorAnswer int
	SET @AuthorAnswer = (SELECT c.AuthorId FROM {databaseOwner}{objectQualifier}activeforums_replies as r inner join {databaseOwner}{objectQualifier}activeforums_content as c ON c.ContentId = r.ContentId WHERE r.TopicId =@TopicId AND r.ReplyId = @ReplyId)
	SET @PointValue = 0
	SELECT @PointValue = SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'MARKANSWERPOINTVALUE' AND ModuleId = @ModuleId
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles
	SET RewardPoints = RewardPoints + @PointValue
	WHERE UserId = @UserId AND PortalId = @PortalId 
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles
	SET AnswerCount = AnswerCount + @PointValue
	WHERE UserId = @AuthorAnswer AND PortalId = @PortalId
END
GO


/* issue 1042 - end - mark answer */

/* --------------------- */



/* issue 1156 - begin - deleting a forum should remove subscriptions */

/* activeforums_Forums_Delete -- delete from activeforums_Subscriptions when deleting forum */
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forums_Delete]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forums_Delete]
@PortalId int,
@ModuleId int,
@ForumId int
AS
declare @ParentForumId int,
@ForumGroupId int
SELECT @ParentForumId = ParentForumId, @ForumGroupId = ForumGroupId
FROM {databaseOwner}[{objectQualifier}activeforums_Forums]
WHERE ForumId = @ForumId
DELETE FROM {databaseOwner}[{objectQualifier}activeforums_ForumTopics] WHERE ForumId = @ForumId
DELETE FROM {databaseOwner}[{objectQualifier}activeforums_Forums] WHERE ForumId = @ForumId
DELETE FROM {databaseOwner}[{objectQualifier}activeforums_Subscriptions] WHERE ForumId = @ForumId
EXEC {databaseOwner}[{objectQualifier}activeforums_Forums_RepairSort] @ForumGroupId, @ParentForumId
GO
/* issue 1156 - end - deleting a forum should remove subscriptions */

/* --------------------- */