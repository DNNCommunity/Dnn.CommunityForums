/* issue 420 - new topic views */

SET NOCOUNT ON

/*activeforums_UI_MostReplies*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MostReplies]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostReplies]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostReplies]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@TimeFrame int,
	@ForumIds nvarchar(1000)
AS

	SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED


	-- Populate our active topics table
	
	CREATE TABLE #MostReplies(RowRank int NOT NULL, TopicId int NOT NULL)
	
	INSERT INTO #MostReplies(RowRank, TopicId)
	SELECT ROW_NUMBER() OVER (
			ORDER BY 
				CASE 
					WHEN @Sort = 'DESC' THEN T.ReplyCount END DESC, 
				CASE  
					WHEN @Sort = 'ASC' THEN T.ReplyCount END ASC) as RowRank, 
		T.TopicId
	FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView T INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = T.ForumId
	WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND DATEDIFF(mi,t.LastReplyDate,GETUTCDATE())<= @TimeFrame

	-- Get our record count
	
	DECLARE @RecordCount int
	SET @RecordCount = (SELECT COUNT(*) FROM #MostReplies)

	-- Return our result set

	SELECT 
		f.ForumId,
		f.ForumName,
		IsNull(f.LastReplyId,0) as LastReplyId,
		t.TopicId,
		t.ViewCount,
		t.ReplyCount,
		t.IsLocked,
		t.IsPinned,
		IsNull(t.TopicIcon,'') as TopicIcon,
		t.StatusId,
		t.IsAnnounce,
		t.AnnounceStart,
		t.AnnounceEnd,
		t.TopicType,
		c.Subject,
		IsNull(c.Summary,'') as Summary,
		IsNull(c.AuthorId,-1) as AuthorId,
		IsNull(c.AuthorName,'') as AuthorName,
		c.Body,
		c.DateCreated,
		IsNull(u.Username,'') as AuthorUserName,
		IsNull(u.FirstName,'') as AuthorFirstName,
		IsNull(u.LastName,'') as AuthorLastName,
		IsNull(u.DisplayName,'') as AuthorDisplayName,
		CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
		CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
		CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
		CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
		CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
		CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
		CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
		CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
		CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
		CASE WHEN TT.LastReplyId < ISNULL(f.LastReplyId,0) THEN TT.LastReplyId ELSE 0 END AS LastReplyRead, 
		CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
		CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
		CASE WHEN ftt.LastReplyID <= tt.LastReplyId OR (ISNULL(ftt.LastReplyId,'') = 0 AND c.AuthorId = @UserId) OR (FT.MaxReplyRead >= ftt.LastReplyId) THEN 1 ELSE 0 END AS IsRead,
		ftt.LastReplyId as TopicLastReplyId,
		tr.TopicRating, 
		@RecordCount as RecordCount,
		ISNULL(t.URL,'') as  TopicURL,
		ISNULL(f.PrefixURL,'') as ForumUrl,
		ISNULL(g.PrefixURL,'') as GroupUrl,
		g.ForumGroupId,
		IsNull(S.Mode,0) AS SubscriptionType
		
		FROM	#MostReplies as tmp 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t on t.TopicId = tmp.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics AS ftt ON ftt.TopicId = t.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_forums as f ON f.forumId = ftt.ForumId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = t.ContentId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}vw_activeforums_TopicRatings as tr on tr.TopicId = t.TopicId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as u on u.UserId = c.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r on r.ReplyId = ftt.LastReplyId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Content as rc on rc.ContentId = r.ContentId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as ru on ru.UserId = rc.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS tt ON tt.TopicId = t.TopicId AND t.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as ft ON ft.ForumId = f.ForumId AND ft.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Subscriptions AS S ON S.ForumId = f.ForumId AND S.TopicId = T.TopicId and S.UserId = @UserId
				
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	ORDER BY RowRank

	DROP TABLE #MostReplies
GO



/*activeforums_UI_MostLiked*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MostLiked]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostLiked]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostLiked]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@TimeFrame int,
	@ForumIds nvarchar(1000)
AS

	SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED


	-- Populate our active topics table
	
	CREATE TABLE #MostLiked(RowRank int NOT NULL, TopicId int NOT NULL)
	
	INSERT INTO #MostLiked(RowRank, TopicId)
	SELECT ROW_NUMBER() OVER (
			ORDER BY 
				CASE 
					WHEN @Sort = 'DESC' THEN (COALESCE(tl.LikeCount,0)+COALESCE(rl.LikeCount,0)) END DESC, 
				CASE  
					WHEN @Sort = 'ASC' THEN (COALESCE(tl.LikeCount,0)+COALESCE(rl.LikeCount,0)) END ASC) as RowRank, 
		T.TopicId
	FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView T INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = T.ForumId

		LEFT OUTER JOIN (SELECT l.PostId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l WHERE l.Checked = 1 GROUP BY l.PostId) tl ON tl.PostId = T.TopicId
		LEFT OUTER JOIN (SELECT r.TopicId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l INNER JOIN {databaseOwner}{objectQualifier}activeforums_Replies r ON r.ReplyId = l.PostId WHERE l.Checked = 1 GROUP BY r.TopicId) rl ON rl.TopicId = T.TopicId


	WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId 
	/* no way to currently support this */ /* AND DATEDIFF(mi,t.LastReplyDate,GETUTCDATE())<= @TimeFrame */ 

	-- Get our record count
	
	DECLARE @RecordCount int
	SET @RecordCount = (SELECT COUNT(*) FROM #MostLiked)

	-- Return our result set

	SELECT 
		f.ForumId,
		f.ForumName,
		IsNull(f.LastReplyId,0) as LastReplyId,
		t.TopicId,
		t.ViewCount,
		t.ReplyCount,
		t.IsLocked,
		t.IsPinned,
		IsNull(t.TopicIcon,'') as TopicIcon,
		t.StatusId,
		t.IsAnnounce,
		t.AnnounceStart,
		t.AnnounceEnd,
		t.TopicType,
		c.Subject,
		IsNull(c.Summary,'') as Summary,
		IsNull(c.AuthorId,-1) as AuthorId,
		IsNull(c.AuthorName,'') as AuthorName,
		c.Body,
		c.DateCreated,
		IsNull(u.Username,'') as AuthorUserName,
		IsNull(u.FirstName,'') as AuthorFirstName,
		IsNull(u.LastName,'') as AuthorLastName,
		IsNull(u.DisplayName,'') as AuthorDisplayName,
		CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
		CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
		CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
		CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
		CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
		CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
		CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
		CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
		CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
		CASE WHEN TT.LastReplyId < ISNULL(f.LastReplyId,0) THEN TT.LastReplyId ELSE 0 END AS LastReplyRead, 
		CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
		CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
		CASE WHEN ftt.LastReplyID <= tt.LastReplyId OR (ISNULL(ftt.LastReplyId,'') = 0 AND c.AuthorId = @UserId) OR (FT.MaxReplyRead >= ftt.LastReplyId) THEN 1 ELSE 0 END AS IsRead,
		ftt.LastReplyId as TopicLastReplyId,
		tr.TopicRating, 
		@RecordCount as RecordCount,
		ISNULL(t.URL,'') as  TopicURL,
		ISNULL(f.PrefixURL,'') as ForumUrl,
		ISNULL(g.PrefixURL,'') as GroupUrl,
		g.ForumGroupId,
		IsNull(S.Mode,0) AS SubscriptionType
		
		FROM	#MostLiked as tmp 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t on t.TopicId = tmp.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics AS ftt ON ftt.TopicId = t.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_forums as f ON f.forumId = ftt.ForumId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = t.ContentId 
		
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}vw_activeforums_TopicRatings as tr on tr.TopicId = t.TopicId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as u on u.UserId = c.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r on r.ReplyId = ftt.LastReplyId 
		LEFT OUTER JOIN (SELECT l.PostId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l WHERE l.Checked = 1 GROUP BY l.PostId) tl ON tl.PostId = t.TopicId
		LEFT OUTER JOIN (SELECT r.TopicId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l INNER JOIN {databaseOwner}{objectQualifier}activeforums_Replies r ON r.ReplyId = l.PostId WHERE l.Checked = 1 GROUP BY r.TopicId) rl ON rl.TopicId = t.TopicId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Content as rc on rc.ContentId = r.ContentId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as ru on ru.UserId = rc.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS tt ON tt.TopicId = t.TopicId AND tt.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as ft ON ft.ForumId = f.ForumId AND ft.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Subscriptions AS S ON S.ForumId = f.ForumId AND S.TopicId = T.TopicId and S.UserId = @UserId
				
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	ORDER BY RowRank

	DROP TABLE #MostLiked
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_URL_Search]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_URL_Search]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_URL_Search]
@PortalId int,
@Url nvarchar(max)
AS
DECLARE @views TABLE(id int,viewname nvarchar(50))
INSERT INTO @views (id,viewname) VALUES (1,'unanswered');
INSERT INTO @views (id,viewname) VALUES (2,'notread');
INSERT INTO @views (id,viewname) VALUES (3,'mytopics');
INSERT INTO @views (id,viewname) VALUES (4,'activetopics');
INSERT INTO @views (id,viewname) VALUES (5,'afprofile');
INSERT INTO @views (id,viewname) VALUES (6,'mostliked');
INSERT INTO @views (id,viewname) VALUES (7,'mostreplies');
SELECT TabId, ModuleID, ForumGroupId, ForumId, TopicId, Url,Archived,OtherId,UrlType FROM 
	(
		SELECT tb.TabID,m.ModuleId, g.ForumGroupId,f.ForumId,t.TopicId, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' + f.PrefixURL + '/' + t.URL + '/' as URL, 0 as Archived,-1 as OtherId,0 as URLType from {databaseOwner}[{objectQualifier}activeforums_Topics] as t
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] as ft ON ft.TopicId = t.TopicId
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] as f ON f.ForumId = ft.ForumId
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] as g ON g.ForumGroupId = f.ForumGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}ModuleSettings] as s ON s.ModuleId = f.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = f.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(t.URL,'') <> '' AND ISNULL(f.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,g.ForumGroupId,f.ForumId,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' + f.PrefixURL + '/' as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}[{objectQualifier}activeforums_Forums] as f
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] as g ON g.ForumGroupId = f.ForumGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}ModuleSettings] as s ON s.ModuleId = f.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = f.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(f.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,g.ForumGroupId,-1,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}[{objectQualifier}activeforums_Groups] as g 
			INNER JOIN {databaseOwner}[{objectQualifier}ModuleSettings] as s ON s.ModuleId = g.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = g.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(g.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,-1,-1,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}[{objectQualifier}ModuleSettings] as s 
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = s.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND s.SettingValue <> ''
		UNION
		SELECT m.TabID,m.ModuleID,u.ForumGroupId,u.ForumId,u.TopicId, u.URL, 1 as Archived,-1,0 from {databaseOwner}[{objectQualifier}activeforums_URL] as u
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] as g ON u.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = g.ModuleId
		WHERE u.PortalId = @PortalId
		UNION
		SELECT TabId, ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId, 
			(CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + UrlOther + '/' + v.viewname + '/' as URL,0 as Archived,v.id,1 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}[{objectQualifier}ModuleSettings] as ss
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLOTHER') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,UrlOther)) as pu,@views as v
		UNION
		SELECT TabId, pu.ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId,
		 (CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + URLCATS + '/' + REPLACE(LOWER(t.TagName),' ','-') + '/' as URL,0 as Archived,t.TagId,2 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}[{objectQualifier}ModuleSettings] as ss
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLCATS') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,URLCATS)) as pu
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Tags] as t ON t.ModuleId = pu.ModuleId AND t.IsCategory = 1
		UNION
		SELECT TabId, pu.ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId,
		 (CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + URLTAGS + '/' + REPLACE(LOWER(t.TagName),' ','-') + '/' as URL,0 as Archived,t.TagId,3 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}[{objectQualifier}ModuleSettings] as ss
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLTAGS') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,URLTAGS)) as pu
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Tags] as t ON t.ModuleId = pu.ModuleId AND t.IsCategory = 0
	) as urls
	WHERE LOWER(urls.URL) = @URL
GO


/* issue 420 -  new topic views  */

