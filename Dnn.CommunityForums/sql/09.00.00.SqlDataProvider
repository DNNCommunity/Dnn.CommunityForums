SET NOCOUNT ON 
GO

/* issues 1184 - begin - convert NTEXT to NVARCHAR(MAX)  */

DECLARE @FullTextEnabled INT

/*
    This script is used to convert NTEXT columns to NVARCHAR(MAX) in the activeforums_Content, activeforums_EmailNotificationQueue, and activeforums_Templates tables.
    (even though we are removing activeforums_Templates, it is included for completeness... )
    It also drops and re-adds full text indexes if they are enabled on those columns.
*/

IF EXISTS (SELECT * FROM sys.columns WHERE system_type_id = 99 and object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Content]') AND name = 'Body')
BEGIN
    PRINT 'Updating activeforums_Content.Body from NTEXT to NVARCHAR(MAX)'
    
    SELECT @FullTextEnabled = COLUMNPROPERTY(OBJECT_ID('{databaseOwner}[{objectQualifier}activeforums_Content]'), 'Body', 'IsFulltextIndexed')
    IF @FullTextEnabled = 1
    BEGIN
        PRINT 'Dropping Full Text Index on activeforums_Content.Body'
        EXEC sp_fulltext_column      
        @tabname =  '{databaseOwner}[{objectQualifier}[activeforums_Content]' , 
        @colname =  'Body' , 
        @action =  'drop' 
    END
    ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Content] ALTER COLUMN Body NVARCHAR(MAX) NULL

    /* this step moves the data internally from the old NTEXT column to the new NVARCHAR(MAX) column */
    UPDATE {databaseOwner}[{objectQualifier}activeforums_Content] SET Body = Body
    
    IF @FullTextEnabled = 1
    BEGIN
        PRINT 'Adding Full Text Index on activeforums_Content.Body'
        EXEC sp_fulltext_column      
        @tabname =  '{databaseOwner}[{objectQualifier}[activeforums_Content]' , 
        @colname =  'Body' , 
        @action =  'add' 
    END
END

IF EXISTS (SELECT * FROM sys.columns WHERE system_type_id = 99 and object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_EmailNotificationQueue]') AND name = 'EmailBody')
BEGIN
    PRINT 'Updating activeforums_EmailNotificationQueue.EmailBody from NTEXT to NVARCHAR(MAX)'
    
    SELECT @FullTextEnabled = COLUMNPROPERTY(OBJECT_ID('{databaseOwner}[{objectQualifier}activeforums_EmailNotificationQueue]'), 'EmailBody', 'IsFulltextIndexed')
    IF @FullTextEnabled = 1
    BEGIN
        PRINT 'Dropping Full Text Index on activeforums_EmailNotificationQueue.EmailBody'
        EXEC sp_fulltext_column      
        @tabname =  '{databaseOwner}[{objectQualifier}[activeforums_Content]' , 
        @colname =  'EmailBody' , 
        @action =  'drop' 
    END
    ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_EmailNotificationQueue] ALTER COLUMN EmailBody NVARCHAR(MAX) NULL
    
    /* this step moves the data internally from the old NTEXT column to the new NVARCHAR(MAX) column */
    UPDATE {databaseOwner}[{objectQualifier}activeforums_EmailNotificationQueue] SET EmailBody = EmailBody
    
    IF @FullTextEnabled = 1
    BEGIN
        PRINT 'Adding Full Text Index on activeforums_EmailNotificationQueue.EmailBody'
        EXEC sp_fulltext_column      
        @tabname =  '{databaseOwner}[{objectQualifier}[activeforums_EmailNotificationQueue]' , 
        @colname =  'EmailBody' , 
        @action =  'add' 
    END
END

IF EXISTS (SELECT * FROM sys.columns WHERE system_type_id = 99 and object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Templates]') AND name = 'Template')
BEGIN
    PRINT 'Updating activeforums_Templates.EmailBody from NTEXT to NVARCHAR(MAX)'
    
    SELECT @FullTextEnabled = COLUMNPROPERTY(OBJECT_ID('{databaseOwner}[{objectQualifier}activeforums_Templates]'), 'Template', 'IsFulltextIndexed')
    IF @FullTextEnabled = 1
    BEGIN
        PRINT 'Dropping Full Text Index on activeforums_Templates.Template'
        EXEC sp_fulltext_column      
        @tabname =  '{databaseOwner}[{objectQualifier}[activeforums_Content]' , 
        @colname =  'Template' , 
        @action =  'drop' 
    END
    ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Templates] ALTER COLUMN Template NVARCHAR(MAX) NULL
    
    /* this step moves the data internally from the old NTEXT column to the new NVARCHAR(MAX) column */
    UPDATE {databaseOwner}[{objectQualifier}activeforums_Templates] SET Template = Template
    
    IF @FullTextEnabled = 1
    BEGIN
        PRINT 'Adding Full Text Index on activeforums_Templates.Template'
        EXEC sp_fulltext_column      
        @tabname =  '{databaseOwner}{objectQualifier}[activeforums_Templates]' , 
        @colname =  'Template' , 
        @action =  'add' 
    END
END 


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_activeforums_Topics]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}vw_activeforums_Topics]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_activeforums_Replies]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}vw_activeforums_Replies]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_activeforums_ForumTopics]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}vw_activeforums_ForumTopics]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_activeforums_ForumReplies]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}vw_activeforums_ForumReplies]';
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_activeforums_TopicsView]') AND type in (N'V', N'VW'))
EXECUTE sp_refreshsqlmodule N'{databaseOwner}[{objectQualifier}vw_activeforums_TopicsView]';
GO



/* begin: activeforums_Topics_Save */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Save]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Save]
@PortalId int,
@TopicId int,
@ViewCount int,
@ReplyCount int,
@IsLocked bit,
@IsPinned bit,
@TopicIcon nvarchar(25),
@StatusId int,
@IsApproved bit,
@IsDeleted bit,
@IsAnnounce bit,
@IsArchived bit,
@AnnounceStart datetime,
@AnnounceEnd datetime,
@Subject nvarchar(255),
@Body nvarchar(max),
@Summary nvarchar(1000),
@DateCreated datetime,
@DateUpdated datetime,
@AuthorId int,
@AuthorName nvarchar(150),
@IPAddress nvarchar(50),
@TopicType int,
@Priority int,
@URL nvarchar(1000),
@TopicData nvarchar(max)
AS
DECLARE @ContentId int
DECLARE @ForumId int
DECLARE @ForumGroupId int
DECLARE @ModuleId int
SET @ForumId = -1
SET @ModuleId = -1
DECLARE @ApprovedStatus bit
SET @ApprovedStatus = @IsApproved
DECLARE @currURL nvarchar(1000)
IF @URL <> '' AND @TopicId>0
BEGIN
	SET @ForumId = (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId)
	SET @ModuleId = (SELECT ModuleId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId= @ForumId)
	SET @ForumGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId= @ForumId)
	SET @currURL = {databaseOwner}{objectQualifier}fn_activeforums_GetURL(@ModuleId,@ForumGroupId,@ForumId,@TopicId,-1,-1)
	IF @currURL <> ''
		BEGIN
			DECLARE @newURL nvarchar(1000)
			SET @newURL = {databaseOwner}{objectQualifier}fn_activeforums_GetURL(@ModuleID,@ForumGroupId, @ForumId,-1,-1,-1) + @URL + '/'
			IF LTRIM(RTRIM(LOWER(@newURL))) <> LTRIM(RTRIM(LOWER(@currURL))) 
				BEGIN
					exec {databaseOwner}{objectQualifier}activeforums_URL_Archive @PortalId,@ForumGroupId, @ForumId, @TopicId, @currURL
				END
		END
END
IF EXISTS(SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId)
BEGIN
	SELECT @ApprovedStatus = IsApproved, @ContentId = ContentId FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId

	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Content
			SET Subject = @Subject,
				Body = @Body,
				Summary = @Summary,
				DateCreated = @DateCreated,
				DateUpdated = @DateUpdated,
				AuthorId = @AuthorId,
				AuthorName = @AuthorName,
				IsDeleted = @IsDeleted
			WHERE ContentId = @ContentId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ViewCount = @ViewCount,
				ReplyCount = @ReplyCount,
				IsLocked = @IsLocked,
				IsPinned = @IsPinned,
				TopicIcon = @TopicIcon,
				StatusId = @StatusId,
				IsApproved = @IsApproved,
				IsDeleted = @IsDeleted,
				IsAnnounce = @IsAnnounce,
				IsArchived = @IsArchived,
				AnnounceStart = @AnnounceStart,
				AnnounceEnd = @AnnounceEnd,
				TopicType = @TopicType,
				Priority = @Priority,
				URL = @URL,
				TopicData = @TopicData
			WHERE TopicId = @TopicId	
		IF @IsApproved = 1 And @AuthorId > 0 
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles 
				SET DateLastReply = GETUTCDATE()
				WHERE UserId = @AuthorId AND PortalId = @PortalId
		END
	END
END
ELSE

BEGIN
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Content
			(Subject, Body, Summary, DateCreated, DateUpdated, AuthorId, AuthorName, IsDeleted, IPAddress)
			VALUES
			(@Subject, @Body, @Summary, @DateCreated, @DateUpdated, @AuthorId, @AuthorName, @IsDeleted, @IPAddress)
		SET @ContentId = SCOPE_IDENTITY()
	END
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Topics
			(ContentId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsApproved, IsDeleted, IsAnnounce, IsArchived, TopicType, AnnounceStart, AnnounceEnd, Priority, URL, TopicData)
			VALUES
			(@ContentId, @ViewCount, @ReplyCount, @IsLocked, @IsPinned, @TopicIcon, @StatusId, @IsApproved, @IsDeleted, @IsAnnounce, @IsArchived, @TopicType, @AnnounceStart, @AnnounceEnd, @Priority, @URL, @TopicData)
		SET @TopicId = SCOPE_IDENTITY()

	END
	IF @IsApproved = 1 And @AuthorId > 0 
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles 
				SET DateLastPost = GETUTCDATE()
				WHERE UserId = @AuthorId AND PortalId = @PortalId
		END
END
SELECT @TopicId

GO

/* end : activeforums_Topics_Save */


/* begin: activeforums_Reply_Save */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Reply_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Save]
GO
 
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Save]
@PortalId int,
@TopicId int,
@ReplyId int,
@ReplyToId int,
@StatusId int,
@IsApproved bit,
@IsDeleted bit,
@Subject nvarchar(255),
@Body nvarchar(max),
@DateCreated datetime,
@DateUpdated datetime,
@AuthorId int,
@AuthorName nvarchar(150),
@IPAddress nvarchar(50)
AS
DECLARE @ContentId int
DECLARE @IsEdit bit
SET @IsEdit = 0
DECLARE @ApprovedStatus bit
SET @ApprovedStatus = @IsApproved

-- This part is a work around for Quick Reply feature not working for Tapatalk STARTS

DECLARE @TopicSubject NVARCHAR(255) =	(
											SELECT top 1 afc.Subject FROM {databaseOwner}[{objectQualifier}activeforums_Topics] aft
												JOIN {databaseOwner}[{objectQualifier}activeforums_Content] afc ON aft.ContentId = afc.ContentId
											WHERE TopicId = @TopicId
										)	
										
SET @Subject = ISNULL(NULLIF(@Subject, ''), 'RE: ' + @TopicSubject)	

IF (@Subject NOT LIKE 'RE:%')
BEGIN
	SET @Subject = 'RE: ' + @Subject
END
-- This part is a work around for Quick Reply feature not working for Tapatalk ENDS


IF EXISTS(SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE ReplyId = @ReplyId)
	BEGIN
		SELECT @ContentId = ContentId, @ApprovedStatus = IsApproved FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE ReplyId = @ReplyId
		
		BEGIN
			SET @IsEdit = 1
			UPDATE {databaseOwner}{objectQualifier}activeforums_Content
				SET Subject = @Subject,
					Body = @Body,
					DateCreated = @DateCreated,
					DateUpdated = @DateUpdated,
					AuthorId = @AuthorId,
					AuthorName = @AuthorName,
					IsDeleted = @IsDeleted,
					IPAddress = @IPAddress
				WHERE ContentId = @ContentId
			UPDATE {databaseOwner}{objectQualifier}activeforums_Replies
				SET StatusId = @StatusId,
					TopicId = @TopicId,
					IsApproved = @IsApproved,
					IsDeleted = @IsDeleted,
					ReplyToId = @ReplyToId					
				WHERE ReplyId = @ReplyId	
		END
	END
ELSE
--INSERT
BEGIN
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Content
			(Subject, Body, DateCreated, DateUpdated, AuthorId, AuthorName, IsDeleted, IPAddress)
			VALUES
			(@Subject, @Body, @DateCreated, @DateUpdated, @AuthorId, @AuthorName, @IsDeleted, @IPAddress)
		SET @ContentId = SCOPE_IDENTITY()
	END
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Replies
			(ContentId, TopicId, StatusId, IsApproved, IsDeleted, ReplyToId)
			VALUES
			(@ContentId, @TopicId, @StatusId, @IsApproved, @IsDeleted, @ReplyToId)
		SET @ReplyId = SCOPE_IDENTITY()
		
	END
	

END
IF @IsApproved = 1
	BEGIN
		DECLARE @ForumId int
		SELECT @ForumId = ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId
		DECLARE @TotalReplies int
		SET @TotalReplies = (SELECT Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_replies as r inner join {databaseOwner}{objectQualifier}activeforums_topics as t on t.topicid = r.topicid and r.isapproved = 1 and r.isdeleted = 0 INNER JOIN {databaseOwner}{objectQualifier}activeforums_forumtopics as ft on t.topicid = ft.topicid WHERE ft.forumid = @ForumId)
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums 
		SET LastPostSubject = @Subject, LastPostAuthorName = @AuthorName, LastPostAuthorId = IsNull(@AuthorId,-1), 
			LastPostDate = @DateCreated, LastTopicId = IsNull(@TopicId,0), LastReplyId = IsNull(@ReplyId,0),
			TotalReplies = ISNULL(@TotalReplies,0)
		WHERE ForumId = @ForumId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
			WHERE TopicId = @TopicId
		IF @AuthorId > 0
			UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles 
				SET ReplyCount = ISNULL((Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies as r INNER JOIN 
						{databaseOwner}{objectQualifier}activeforums_Content as c ON r.ContentId = c.ContentId AND c.AuthorId=@AuthorId INNER JOIN
						{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft ON ft.TopicId = r.TopicId INNER JOIN
						{databaseOwner}{objectQualifier}activeforums_Forums as f ON ft.ForumId = f.ForumId
						WHERE r.IsApproved = 1 AND r.IsDeleted=0 AND f.PortalId=@PortalId),0)
				WHERE UserId = @AuthorId AND PortalId = @PortalId						
		
	END


/* populate ModuleId in activeforums_Content */
UPDATE c
SET c.ModuleId = f.ModuleId
FROM {databaseOwner}[{objectQualifier}activeforums_Content] c 
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Replies] r
ON r.ContentId = c.ContentId 
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] ft 
ON ft.TopicId = r.TopicId
LEFT OUTER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] f 
ON f.ForumId = ft.ForumId
WHERE c.ModuleId IS NULL AND r.ReplyId = @ReplyId


SELECT @ReplyId
GO
/* end: activeforums_Reply_Save */


/* begin: activeforums_Templates_Save*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Templates_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Templates_Save]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Templates_Save]
	@TemplateId int,
	@PortalId int,
	@ModuleId int,
	@TemplateType int,
	@IsSystem bit,
	@Title nvarchar(150),
	@Subject nvarchar(200),
	@Template nvarchar(max)	
AS
BEGIN
IF EXISTS (Select TemplateId FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE TemplateId = @TemplateID AND PortalId = @PortalId AND ModuleId = @ModuleID) 
	--UPDATE
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Templates
			SET
				TemplateType = @TemplateType,
				IsSystem = @IsSystem,
				Title = @Title,
				Subject = @Subject,
				Template = @Template,
				DateUpdated = GETUTCDATE()
			WHERE
				TemplateId = @TemplateId AND PortalId = @PortalId AND ModuleId = @ModuleId
	END
ELSE
	--INSERT
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Templates
			(PortalId, ModuleId, TemplateType, Title, Subject, Template, DateCreated)
			VALUES
			(@PortalId, @ModuleId, @TemplateType,@Title,@Subject,@Template, GETUTCDATE())
		SET @TemplateId = SCOPE_IDENTITY()
		DECLARE @TemplateTitleCount int
		SET @TemplateTitleCount = (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE Title = @Title AND ModuleId = @ModuleId) 
		IF @TemplateTitleCount <> 1 
			BEGIN
				UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'-',LTRIM(STR(TemplateId)),'.ascx') WHERE TemplateId = @TemplateId AND FileName IS NULL
			END
			ELSE
				BEGIN
					UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'.ascx') WHERE TemplateId = @TemplateId AND FileName IS NULL
				END 
	END
END

SELECT @TemplateId
GO
/* end: activeforums_Templates_Save*/

/* begin: activeforums_Mod_Pending */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Mod_Pending]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Mod_Pending]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Mod_Pending]
@PortalId int,
@ModuleId int,
@ForumId int,
@UserId int
AS
	DECLARE @tmpForumId int
	Set @tmpForumId = -1
	If @ForumId = -1
		SET @tmpForumId = 0
	SET NOCOUNT ON;
	BEGIN	
SELECT     PortalId, T.ModuleId, ForumId, ForumName, TopicId, 0 as ReplyId, Subject, Summary, Body, AuthorId, AuthorName, Username, FirstName, LastName, DisplayName, DateCreated, 
                      DateUpdated, ContentId, TopicIcon, StatusId, TopicType, IsPinned, IsLocked, ViewCount, ReplyCount, T.SortOrder as ForumSort, G.GroupName, G.SortOrder as GroupSort 
                      FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumTopics as T
				INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as G on T.ForumGroupId = G.ForumGroupId
	WHERE PortalId = @PortalId AND T.ModuleId = @ModuleId AND IsApproved = 0 AND T.IsRejected = 0 AND (ForumId = @ForumId AND @tmpForumId = -1 OR ForumId > @tmpForumId AND @tmpForumId = 0)
	UNION
	SELECT     PortalId, R.ModuleId, ForumId, ForumName, TopicId, ReplyId, Subject, Summary, Body, AuthorId, AuthorName, Username, FirstName, LastName, DisplayName, DateCreated, 
                      DateUpdated, ContentId, TopicIcon, StatusId, TopicType, IsPinned, IsLocked, ViewCount, ReplyCount, R.SortOrder as ForumSort, G.GroupName, G.SortOrder as GroupSort
                       FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies as R
				INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as G on R.ForumGroupId = G.ForumGroupId
	WHERE PortalId = @PortalId AND R.ModuleId = @ModuleId AND IsApproved = 0 AND R.IsRejected = 0 AND (ForumId = @ForumId AND @tmpForumId = -1 OR ForumId > @tmpForumId AND @tmpForumId = 0)
	ORDER BY GroupSort, ForumSort, DateCreated
	END
	BEGIN
SELECT     A.AttachID, A.ContentId, A.UserID, A.Filename, A.DateAdded, A.DateUpdated, A.FileData, A.ContentType, A.FileSize
FROM         {databaseOwner}{objectQualifier}activeforums_Attachments AS A
WHERE A.ContentId in (SELECT ContentId FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies WHERE IsApproved = 0 AND PortalId = @PortalId AND ModuleId = @ModuleId)
OR
A.ContentId in (SELECT ContentId FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumTopics WHERE IsApproved = 0 AND PortalId = @PortalId AND ModuleId = @ModuleId)
END
GO

/* end: activeforums_Mod_Pending */

/* begin: activeforums_Search_GetSearchItemsFromBegDate */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Search_GetSearchItemsFromBegDate]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Search_GetSearchItemsFromBegDate]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Search_GetSearchItemsFromBegDate(@ModuleId int, @beginDateUtc datetime)
AS
SELECT F.ForumGroupId, FT.ForumId, X.TopicId, X.ReplyId, X.ContentId, X.DateCreated, X.DateUpdated, X.Summary, X.Subject, X.AuthorId, X.Body , X.IsDeleted, X.IsApproved,
RTRIM(IsNull([dbo].activeforums_Topics_GetTags(X.TopicId),'')) AS Tags, X.TopicURL, F.PrefixURL AS ForumUrlPrefix, G.PrefixURL AS ForumGroupUrlPrefix
FROM 
(
SELECT 
T.TopicId, -1 AS ReplyId, C.ContentId, C.DateCreated, C.DateUpdated, C.Summary, C.Subject, C.AuthorId, C.Body, T.IsDeleted, T.IsApproved, T.URL AS TopicUrl
FROM {databaseOwner}{objectQualifier}activeforums_Topics T
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content C ON C.ContentId = T.ContentId 
WHERE C.DateUpdated BETWEEN @beginDateUtc AND GETUTCDATE() 
UNION
SELECT
R.TopicId, R.ReplyId, C.ContentId, C.DateCreated, C.DateUpdated, C.Summary, C.Subject, C.AuthorId, C.Body, R.IsDeleted, R.IsApproved, T.URL AS TopicUrl
FROM {databaseOwner}{objectQualifier}activeforums_Replies R
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content C ON C.ContentId = R.ContentId 
LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics T ON T.TopicId = R.TopicId
WHERE C.DateUpdated BETWEEN @beginDateUtc AND GETUTCDATE() 
) X
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics T ON T.TopicId = X.TopicId
INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics FT ON FT.TopicId = T.TopicId 
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums F ON F.ForumId = FT.ForumId 
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups G ON G.ForumGroupId  = F.ForumGroupId 
INNER JOIN {databaseOwner}{objectQualifier}activeforums_settings S ON S.GroupKey = F.ForumSettingsKey AND S.SettingName = 'INDEXCONTENT'
WHERE F.Active = 1 AND S.SettingValue = 'true' AND F.ModuleId = @ModuleId 
GO

/* end: activeforums_Search_GetSearchItemsFromBegDate */


/* begin: activeforums_Search_Standard */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Search_Standard]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Search_Standard]
GO 
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Search_Standard]

@PortalId int,
    @ModuleId int,
    @UserId int,
    @SearchString nvarchar(200), -- String of 1 or more search terms, all separated by spaces
@MatchType int = 0, -- 0 = match any, 1 = match all, 2 = exact match of entire expression only
@SearchField int = 0, -- 0 = Subject & Body, 1 = Subject, 2 =Body
@Timespan int = 0,
    @AuthorId int = 0,
    @Forums nvarchar(max), -- Intersection of forums allowed and forums requested
@Tags nvarchar(400), -- Comma delmited tags
@ResultType int = 0, -- 0 = topics, 1 = posts
@Sort int = 0 -- 0 = relevance then post date (last), 1 = post date (last)

AS

-- Shared Variables
DECLARE @i1 int
DECLARE @i2 int

DECLARE @Word nvarchar(200)
DECLARE @Words table (Word nvarchar(200) COLLATE database_default not null)
DECLARE @WordCount int = 0

DECLARE @Tag nvarchar(400)
DECLARE @TagTable table (Tag nvarchar(400) COLLATE database_default not null)
DECLARE @TagCount int = 0

SET NOCOUNT ON

-- Parse the SearchString into words:


    IF @SearchString IS NOT NULL AND LEN(@SearchString) > 2
BEGIN
IF @MatchType = 2
INSERT INTO @Words SELECT LTRIM(RTRIM(@SearchString))
ELSE
BEGIN
SET @SearchString = ' ' + @SearchString  + ' '
SET @i1 = 1
WHILE @i1 != 0
BEGIN
SET @i2 = CHARINDEX(' ', @SearchString, @i1+1)
IF @i2 != 0
BEGIN
SET @Word = RTRIM(LTRIM(SUBSTRING(@SearchString, @i1+1, @i2-@i1)))
IF LEN(@Word) > 2
BEGIN
IF NOT EXISTS (SELECT * FROM @Words WHERE Word = @Word)
INSERT INTO @Words SELECT @Word

IF @MatchType != 1
BEGIN -- inserts the plural or nonplural version as needed
IF UPPER(RIGHT(@Word,1)) = 'S'
SET @Word = LEFT(@Word,LEN(@Word)-1)
ELSE
SET @Word = @Word + 's'

IF NOT EXISTS (SELECT * FROM @Words WHERE Word = @Word)
INSERT INTO @Words SELECT @Word
END
END

END
SET @i1 = @i2
END
END

SET @WordCount = (SELECT COUNT(*) FROM @Words)
END

-- Parse out the Tags



IF @Tags IS NOT NULL AND @Tags <> ''
BEGIN
INSERT INTO @TagTable
SELECT string
FROM {databaseOwner}{objectQualifier}activeforums_Functions_SplitText(@Tags, ',')

SET @TagCount = (SELECT COUNT(*) from @TagTable)
END


-- If we don't have anything to search for, there's no point in trying
IF @WordCount = 0 AND @TagCount = 0 AND @AuthorId <= 0
BEGIN
DECLARE @tmpResults TABLE (rn int, tid int, cid int, mpct decimal(15,4))
SELECT * FROM @tmpResults
RETURN
END

-- Performance Enhancement

CREATE TABLE #forums(id int NOT NULL)
INSERT INTO #forums(id)
SELECT id
FROM {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':')

CREATE TABLE #tags(Tag nvarchar(400) COLLATE database_default NOT NULL)
INSERT INTO #tags(tag)
SELECT tag
FROM @TagTable

CREATE TABLE #words(Word nvarchar(200) COLLATE database_default not null)
INSERT INTO #words(word)
SELECT word
FROM @Words


-- We have 4 distict paths we can go down to determin the result set depending on whether or not
-- we have search terms and the result type


IF @WordCount > 0 AND @ResultType = 1
BEGIN

-- Get our main result set
SELECT TOP 1000
ROW_NUMBER() OVER (ORDER BY CASE @Sort WHEN 1 THEN DateCreated ELSE hits.MatchPct END DESC, DateCreated DESC) as rn,
    TopicId as tid,
    ContentId as cid,
    hits.MatchPct as mcpt
FROM (
    SELECT  t.topicid,
    t.contentid,
    c.DateCreated
FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
#forums as fs ON fs.id = t.ForumId INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId
WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND
(@TimeSpan = 0 OR DATEDIFF(hh,c.DateCreated,GETUTCDATE()) <= @TimeSpan) AND
(@AuthorId = 0 OR T.AuthorId = @AuthorId) AND
(@TagCount = 0 OR  T.TopicId IN (
    SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Topics_Tags ON {databaseOwner}{objectQualifier}activeforums_Tags.TagId = {databaseOwner}{objectQualifier}activeforums_Topics_Tags.TagId INNER JOIN
#tags TT ON TT.Tag = {databaseOwner}{objectQualifier}activeforums_Tags.TagName))
) AS results INNER JOIN
(
    SELECT ContentId as cid, MatchPct FROM (SELECT C.ContentId, Count(*)  * 1.0 / @WordCount as MatchPct
FROM {databaseOwner}{objectQualifier}activeforums_Content C INNER JOIN
#words W on
CASE @SearchField
WHEN 0 THEN ' ' + c.Body + ' ' + c.Subject + ' '
WHEN 1 THEN ' ' + c.Subject + ' '
WHEN 2 THEN ' ' + c.Body + ' '
END like '%[^a-z]' + Word + '[^a-z]%'
GROUP BY ContentId) as hits
WHERE MatchPct = 1 or @MatchType <> 1
) AS hits ON results.ContentId = hits.cid

DROP TABLE #forums
DROP TABLE #tags
DROP TABLE #words

RETURN
END

IF @WordCount > 0 AND @ResultType = 0
BEGIN

-- Get our main result set
SELECT TOP 1000
ROW_NUMBER() OVER (ORDER BY CASE @Sort WHEN 1 THEN MAX(LastReplyDate) ELSE MAX(hits.MatchPct) END DESC, MAX(LastReplyDate) DESC) as rn,
    TopicId as tid,
    MAX(ContentId) as cid,
    MAX(hits.MatchPct) as mcpt
FROM (
    SELECT  t.topicid,
    t.contentid,
    CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate
FROM         {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
{databaseOwner}{objectQualifier}activeforums_ForumTopics FT on T.TopicId = FT.TopicId INNER JOIN
#forums as fs ON fs.id = t.ForumId INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId  LEFT OUTER JOIN -- Left outer joins to get last reply date
{databaseOwner}{objectQualifier}activeforums_Replies as R on FT.LastReplyId = r.ReplyId LEFT OUTER JOIN
{databaseOwner}{objectQualifier}activeforums_Content as RC on R.ContentId = rc.ContentId
WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND
(@TimeSpan = 0 OR DATEDIFF(hh,CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END,GETUTCDATE()) <= @TimeSpan) AND
(@AuthorId = 0 OR T.AuthorId = @AuthorId) AND
(@TagCount = 0 OR  T.TopicId IN (
    SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Topics_Tags ON {databaseOwner}{objectQualifier}activeforums_Tags.TagId = {databaseOwner}{objectQualifier}activeforums_Topics_Tags.TagId INNER JOIN
#tags TT ON TT.Tag = {databaseOwner}{objectQualifier}activeforums_Tags.TagName))
) AS results INNER JOIN
(
    SELECT ContentId as cid, MatchPct FROM (SELECT C.ContentId, Count(*)  * 1.0 / @WordCount as MatchPct
FROM {databaseOwner}{objectQualifier}activeforums_Content C INNER JOIN
#words W on
CASE @SearchField
WHEN 0 THEN ' ' + c.Body + ' ' + c.Subject + ' '
WHEN 1 THEN ' ' + c.Subject + ' '
WHEN 2 THEN ' ' + c.Body + ' '
END like '%[^a-z]' + Word + '[^a-z]%'
GROUP BY ContentId) as hits
WHERE MatchPct = 1 or @MatchType <> 1
) AS hits ON results.ContentId = hits.cid
GROUP BY TopicID

DROP TABLE #forums
DROP TABLE #tags
DROP TABLE #words

RETURN
END


IF @WordCount = 0 AND @ResultType = 1
BEGIN

-- Get our main result set
SELECT TOP 1000
ROW_NUMBER() OVER (ORDER BY DateCreated DESC) as rn,
    TopicId as tid,
    ContentId as cid,
    1 as mcpt
FROM (
    SELECT  t.topicid,
    t.contentid,
    c.DateCreated
FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
#forums as fs ON fs.id = t.ForumId INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId
WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND
(@TimeSpan = 0 OR DATEDIFF(hh,c.DateCreated,GETUTCDATE()) <= @TimeSpan) AND
(@AuthorId = 0 OR T.AuthorId = @AuthorId) AND
(@TagCount = 0 OR  T.TopicId IN (
    SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Topics_Tags ON {databaseOwner}{objectQualifier}activeforums_Tags.TagId = {databaseOwner}{objectQualifier}activeforums_Topics_Tags.TagId INNER JOIN
#tags TT ON TT.Tag = {databaseOwner}{objectQualifier}activeforums_Tags.TagName))
) as Results

DROP TABLE #forums
DROP TABLE #tags
DROP TABLE #words

RETURN
END

IF @WordCount = 0 AND @ResultType = 0
BEGIN
-- Get our main result set
SELECT TOP 1000
ROW_NUMBER() OVER (ORDER BY MAX(LastReplyDate) DESC) as rn,
    TopicId as tid,
    MAX(ContentId) as cid,
    1 as mcpt
FROM (
    SELECT
t.topicid,
    t.contentid,
    CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate
FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
{databaseOwner}{objectQualifier}activeforums_ForumTopics FT on T.TopicId = FT.TopicId INNER JOIN
#forums as fs ON fs.id = t.ForumId INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId  LEFT OUTER JOIN -- Left outer joins to get last reply date
{databaseOwner}{objectQualifier}activeforums_Replies as R on FT.LastReplyId = r.ReplyId LEFT OUTER JOIN
{databaseOwner}{objectQualifier}activeforums_Content as RC on R.ContentId = rc.ContentId
WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND
(@TimeSpan = 0 OR DATEDIFF(hh,CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END,GETUTCDATE()) <= @TimeSpan) AND
(@AuthorId = 0 OR T.AuthorId = @AuthorId) AND
(@TagCount = 0 OR  T.TopicId IN (
    SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Topics_Tags ON {databaseOwner}{objectQualifier}activeforums_Tags.TagId = {databaseOwner}{objectQualifier}activeforums_Topics_Tags.TagId INNER JOIN
#tags TT ON TT.Tag = {databaseOwner}{objectQualifier}activeforums_Tags.TagName))
) as Results
GROUP BY TopicId

DROP TABLE #forums
DROP TABLE #tags
DROP TABLE #words

RETURN
END

GO
/* end: activeforums_Search_Standard */

/* issues 1184 - end - convert NTEXT to NVARCHAR(MAX)  */

/* ---------------------- */

/* issue 1397 begin - remove already-replaced schedule */

/* remove old scheduler -- note that was to have been removed in 8.1, but there was a typo in the sql */
IF EXISTS (Select * From {databaseOwner}{objectQualifier}Schedule WHERE TypeFullName = 'DotNetNuke.Modules.ActiveForums.Queue.Scheduler, DotNetNuke.Modules.ActiveForums')
	DELETE FROM {databaseOwner}{objectQualifier}Schedule WHERE TypeFullName = 'DotNetNuke.Modules.ActiveForums.Queue.Scheduler, DotNetNuke.Modules.ActiveForums'
GO

/* issue 1397 end - remove already-replaced schedule */
/* ---------------- */





/* issues 1396 - begin - incorrect content shown when editing topic that has replies  */

/*activeforums_UI_TopicsView */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]
@PortalId int,
@ModuleId int,
@ForumId int,
@UserId int,
@RowIndex int = 0, 
@MaxRows int = 20,
@IsSuperUser bit = 0,
@SortColumn nvarchar(25) = 'ReplyCreated'
AS
--Forum/Group Info
DECLARE @PrefixURL nvarchar(255)
DECLARE @GroupPrefix nvarchar(255)
SET @GroupPrefix = (SELECT g.PrefixURL from {databaseOwner}{objectQualifier}activeforums_Groups as g INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.ForumGroupId = g.ForumGroupId WHERE f.ForumId=@ForumId)
SET @PrefixURL = (SELECT PRefixURL from {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
IF @PrefixURL <> '' OR @PrefixURL IS NOT NULL
	SET @PrefixURL = '/' + @PrefixURL + '/'
IF @GroupPrefix <> '' OR @GroupPrefix IS NOT NULL
	SET @PrefixURL = '/' + @GroupPrefix + @PrefixURL 
BEGIN
	SELECT v.ForumName, v.GroupName, v.ForumGroupId, v.ForumDesc,
		TopicsTemplateId = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = @ModuleId AND SettingName = 'TOPICSTEMPLATEID' and GroupKey = v.ForumSettingsKey),0),
		AllowRSS = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = @ModuleId AND SettingName = 'ALLOWRSS' and GroupKey = v.ForumSettingsKey),0),
		TopicRowCount = IsNull((SELECT Count(t.TopicId) FROM {databaseOwner}{objectQualifier}activeforums_Topics as t inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid WHERE ft.ForumId = @ForumId AND t.IsApproved = 1 and t.IsDeleted = 0),0),
		IsSubscribedForum = IsNull((SELECT ID FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions WHERE ModuleId = @ModuleId AND ForumId = @ForumId AND TopicId = 0 AND UserId = @UserId),0),
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE    (ModuleId = @ModuleId) AND (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
		
		 FROM {databaseOwner}{objectQualifier}vw_activeforums_GroupForum as v WHERE v.ForumActive = 1 AND v.ModuleId = @ModuleId AND v.ForumId = @ForumId
END
--Forum Security
BEGIN
	Select p.* from {databaseOwner}{objectQualifier}activeforums_Permissions as p INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.PermissionsId = p.PermissionsId WHERE f.ModuleId = @ModuleId AND f.ForumId = @ForumId
	
END
--Get Sub Forums
 exec {databaseOwner}{objectQualifier}activeforums_UI_ForumView @PortalId, @ModuleId,@UserId,@IsSuperUser, @ForumId

--Get Topics

SELECT 
	ForumId,
	LastReplyId,
	TopicId,
    ContentId,
    TopicContentId,
	ViewCount,
	ReplyCount,
	IsLocked,
	IsPinned,
    IsApproved,
    IsDeleted,
    IsRejected,
    IsArchived,
	TopicIcon,
	StatusId,
	IsAnnounce,
	AnnounceStart,
	AnnounceEnd,
	TopicType,
    Priority,
	[Subject],
	Summary,
	AuthorId,
	AuthorName,
	Body,
	DateCreated,
	AuthorUserName,
	AuthorFirstName,
	AuthorLastName,
	AuthorDisplayName,
	LastReplyContentId,
	LastReplySubject,
	LastReplySummary,
	LastReplyAuthorId,
	LastReplyAuthorName,
	LastReplyUserName,
	LastReplyFirstName,
	LastReplyLastName,
	LastReplyDisplayName,
	LastReplyDate,
	TopicRating,
	UserLastReplyRead,
	UserLastTopicRead,
	TopicURL,
	TopicData,
	FullURL,
	TopicSubscriberCount,
	ForumSubscriberCount
	FROM (

SELECT 
	f.ForumId,
	IsNull(f.LastReplyId,0) as LastReplyId,
	t.TopicId,
    CASE WHEN rc.ContentId IS NULL THEN c.ContentId ELSE rc.ContentId END as ContentId,
    t.ContentId as TopicContentId,
	t.ViewCount,
	t.ReplyCount,
	t.IsLocked,
	t.IsPinned,
    t.IsApproved,
    t.IsDeleted,
    t.IsRejected,
    t.IsArchived,
	IsNull(t.TopicIcon,'') as TopicIcon,
	t.StatusId,
	t.IsAnnounce,
	t.AnnounceStart,
	t.AnnounceEnd,
	t.TopicType, 
    t.Priority,
	c.Subject,
	IsNull(c.Summary,'') as Summary,
	IsNull(c.AuthorId,-1) as AuthorId,
	IsNull(c.AuthorName,'') as AuthorName,
	c.Body,
	c.DateCreated,
	IsNull(u.Username,'') as AuthorUserName,
	IsNull(u.FirstName,'') as AuthorFirstName,
	IsNull(u.LastName,'') as AuthorLastName,
	IsNull(u.DisplayName,'') as AuthorDisplayName,
	CASE WHEN rc.ContentId IS NULL THEN c.ContentId ELSE rc.ContentId END as LastReplyContentId,
	CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	t.URL as TopicURL,
	IsNull(t.TopicData,'') as TopicData,
	CASE WHEN ISNULL(t.URL,'') <> '' THEN @PrefixURL + t.URL ELSE '' END as FullURL,
	(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC, T.Priority DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN 
										CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END
									WHEN @SortColumn = 'TopicCreated' THEN
										c.DateCreated
								END DESC) as RowRank,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ModuleId = @ModuleId) AND (ForumId = @ForumId) AND (TopicId = T.TopicId)), 0) AS TopicSubscriberCount,
					COALESCE((SELECT COUNT(*)
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ModuleId = @ModuleId) AND (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
				
		FROM	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on f.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on f.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
	
		WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0)	
		) AS TopicsWithRowNumbers
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	IF @RowIndex = 0
	BEGIN
		SELECT 
        f.ForumId,
	    IsNull(f.LastReplyId,0) as LastReplyId,
	    t.TopicId,
	    CASE WHEN rc.ContentId IS NULL THEN c.ContentId ELSE rc.ContentId END as ContentId,
	    t.ViewCount,
	    t.ReplyCount,
	    t.IsLocked,
	    t.IsPinned,
        t.IsApproved,
        t.IsDeleted,
        t.IsRejected,
        t.IsArchived,
	    IsNull(t.TopicIcon,'') as TopicIcon,
	    t.StatusId,
	    t.IsAnnounce,
	    t.AnnounceStart,
	    t.AnnounceEnd,
	    t.TopicType,
        t.Priority,
	    c.Subject,
	    IsNull(c.Summary,'') as Summary,
	    IsNull(c.AuthorId,-1) as AuthorId,
	    IsNull(c.AuthorName,'') as AuthorName,
	    c.Body,
	    c.DateCreated,
	    IsNull(u.Username,'') as AuthorUserName,
	    IsNull(u.FirstName,'') as AuthorFirstName,
	    IsNull(u.LastName,'') as AuthorLastName,
	    IsNull(u.DisplayName,'') as AuthorDisplayName,
	    CASE WHEN rc.ContentId IS NULL THEN c.ContentId ELSE rc.ContentId END as LastReplyContentId,
	    CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	    CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	    CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	    CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	    CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	    CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	    CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	    CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	    CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	    CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	    CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	    t.URL as TopicURL,
	    IsNull(t.TopicData,'') as TopicData,
	    CASE WHEN ISNULL(t.URL,'') <> '' THEN @PrefixURL + t.URL ELSE '' END as FullURL,
	    (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                                FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                                WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						    ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								    CASE
									    WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END DESC
											    ) as RowRank,
					    COALESCE((SELECT COUNT(*)
							      FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							      WHERE     (ModuleId = @ModuleId) AND (ForumId = @ForumId) AND (TopicId = T.TopicId)), 0) AS TopicSubscriberCount,
					    COALESCE((SELECT COUNT(*)
							      FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							      WHERE     (ModuleId = @ModuleId) AND (ForumId = @ForumId) AND (TopicId = 0)), 0) AS ForumSubscriberCount
				
		    FROM	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
				    {databaseOwner}{objectQualifier}activeforums_Topics as t on f.TopicId = t.TopicId INNER JOIN
				    {databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				    {databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				    {databaseOwner}{objectQualifier}activeforums_Replies as r on f.LastReplyId = r.ReplyId LEFT OUTER JOIN
				    {databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				    {databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                    {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				    {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
	
		    WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0 AND T.IsAnnounce = 1 AND T.AnnounceStart <= GETUTCDATE() AND T.AnnounceEnd >= GETUTCDATE())
		    ORDER BY T.IsPinned DESC, c.DateCreated DESC, rc.DateCreated DESC
	END
BEGIN
If @UserId > 0
	BEGIN
	exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @UserId
	END
END

GO

/* issues 1396 - end - incorrect content shown when editing topic that has replies  */

/* ---------------------- */




/* issue 1386 begin - retrieve attachments on unapproved posts */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Attachments_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_Get];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_Get]
@AttachmentID int,
@FileID int,
@WithSecurity bit = 0
AS
BEGIN
SET NOCOUNT ON
	If @WithSecurity = 0
		SELECT AttachID, ContentId, IsNull(UserID,-1) as UserID, [Filename], FileData, ContentType, FileSize, FileID, AllowDownload
		FROM {databaseOwner}[{objectQualifier}activeforums_Attachments]
		WHERE (@AttachmentId > 0 AND AttachID = @AttachmentID)
			OR (@FileID > 0 AND @FileID = FileID)
	ELSE
		SELECT A.AttachID, A.ContentId, ISNULL(A.UserID, - 1) AS UserID, A.Filename, A.FileData, A.ContentType, A.FileSize, A.FileID, A.AllowDownload, p.CanRead
		FROM {databaseOwner}[{objectQualifier}activeforums_Attachments] A
        INNER JOIN (SELECT ContentId FROM {databaseOwner}[{objectQualifier}activeforums_Content] WHERE IsDeleted = 0 ) C ON C.ContentId = A.ContentId
		INNER JOIN (
                SELECT ContentId, TopicId FROM {databaseOwner}[{objectQualifier}activeforums_Topics] WHERE IsDeleted = 0 
                UNION 
                SELECT ContentId, TopicId FROM {databaseOwner}[{objectQualifier}activeforums_Replies] WHERE IsDeleted = 0 
                ) tv ON tv.ContentId = c.ContentId
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] FT ON FT.TopicId = tv.TopicId 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] AS F ON F.ForumId	 = FT.ForumId		
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Permissions] AS p ON p.PermissionsId = F.PermissionsId 
		WHERE (@AttachmentID > 0 AND AttachID = @AttachmentID)
			OR (@FileID > 0 AND @FileID = FileID)
END
GO

/* issue 1386 end - retrieve attachments on unapproved posts */

/* ---------------- */


/* issue 1463 - begin - update procedure to remove parsing from CanSubscribe for activeforums_Permissions */

/* updated subscribers procedure */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Subscriptions_Subscribers]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Subscriptions_Subscribers]
GO

CREATE PROCEDURE  {databaseOwner}[{objectQualifier}activeforums_Subscriptions_Subscribers](@PortalId int, @ForumId int, @TopicId int, @SubType int)
AS

DECLARE @CanSubscribe nvarchar(256)
SET @CanSubscribe = (
					SELECT p.CanSubscribe
					FROM {databaseOwner}{objectQualifier}activeforums_Forums as f 
					INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as p 
					ON p.PermissionsId = f.PermissionsId
					WHERE f.ForumId = @ForumId
					)
					
DECLARE @subs TABLE (userid int, email nvarchar(255), topicsubscriber bit)

/* get topic subscribers who are not superusers so need to check against roles allowed to be subscribers */
INSERT INTO @subs 
	(userid, email, topicsubscriber)
	(SELECT s.UserId, u.Email, 1 AS topicsubscriber  
		FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions AS s 		
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums AS f 
		ON f.ForumId = s.ForumId
		INNER JOIN {databaseOwner}{objectQualifier}Users AS u 
		ON  u.UserID = s.UserId 
		AND u.IsSuperUser = 0 
		AND u.IsDeleted = 0
		INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS up 
		ON  up.UserId = u.UserID
		AND up.PortalId = @PortalId
		AND up.IsDeleted = 0
		AND up.Authorised = 1
		INNER JOIN {databaseOwner}{objectQualifier}UserRoles AS ur 
		ON ur.UserID = u.UserID 
		AND (
					(ur.EffectiveDate IS NULL AND ur.ExpiryDate >= GETDATE()) /* DNN platform user roles still use native GETDATE() not GETUTCDATE() */
				OR (ur.EffectiveDate IS NULL AND ur.ExpiryDate IS NULL)
				OR (ur.EffectiveDate <= GETDATE() AND ur.ExpiryDate IS NULL)
				OR (ur.EffectiveDate <= GETDATE() AND ur.ExpiryDate >= GETDATE())
			)
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@CanSubscribe,';') AS r 
		ON r.ID = ur.RoleId
		WHERE 	(s.Mode = @SubType)
		AND 	(s.TopicId = @TopicId)
		AND (NOT EXISTS (SELECT * FROM @subs WHERE userid = s.UserId))
	)

/* get forum subscribers who are not superusers so need to check against roles allowed to be subscribers */
INSERT INTO @subs 
	(userid, email, topicsubscriber)
	(SELECT s.UserId, u.Email, 0 AS topicsubscriber  
		FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions AS s 		
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums AS f 
		ON f.ForumId = s.ForumId
		INNER JOIN {databaseOwner}{objectQualifier}Users AS u 
		ON  u.UserID = s.UserId 
		AND u.IsSuperUser = 0
		AND u.IsDeleted = 0
		INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS up 
		ON  up.UserId = u.UserID
		AND up.PortalId = @PortalId
		AND up.IsDeleted = 0
		AND up.Authorised = 1
		INNER JOIN {databaseOwner}{objectQualifier}UserRoles AS ur 
		ON ur.UserID = u.UserID 
		AND (
					(ur.EffectiveDate IS NULL AND ur.ExpiryDate >= GETDATE()) /* DNN platform user roles still use native GETDATE() not GETUTCDATE() */
				OR (ur.EffectiveDate IS NULL AND ur.ExpiryDate IS NULL)
				OR (ur.EffectiveDate <= GETDATE() AND ur.ExpiryDate IS NULL)
				OR (ur.EffectiveDate <= GETDATE() AND ur.ExpiryDate >= GETDATE())
			)
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@CanSubscribe,';') AS r 
		ON r.ID = ur.RoleId
		WHERE (s.Mode = @SubType)
		AND (S.ForumId = @ForumId AND S.TopicId = 0)
		AND (NOT EXISTS (SELECT * FROM @subs WHERE userid = s.UserId))
	)


/* get topic subscribers who are superusers  */
INSERT INTO @subs 
	(userid, email, topicsubscriber)
	(SELECT s.UserId, u.Email, 1 AS topicsubscriber  
		FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions AS s 		
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums AS f 
		ON f.ForumId = s.ForumId
		INNER JOIN {databaseOwner}{objectQualifier}Users AS u 
		ON  u.UserID = s.UserId 
		AND u.IsSuperUser = 1 
		AND u.IsDeleted = 0
		INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS up 
		ON  up.UserId = u.UserID
		AND up.PortalId = @PortalId
		AND up.IsDeleted = 0
		AND up.Authorised = 1
		WHERE 	(s.Mode = @SubType)
		AND 	(s.TopicId = @TopicId)
		AND (NOT EXISTS (SELECT * FROM @subs WHERE userid = s.UserId))
	)

/* get forum subscribers who are superusers  */
INSERT INTO @subs 
	(userid, email, topicsubscriber)
	(SELECT s.UserId, u.Email, 0 AS topicsubscriber  
		FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions AS s 		
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums AS f 
		ON f.ForumId = s.ForumId
		INNER JOIN {databaseOwner}{objectQualifier}Users AS u 
		ON  u.UserID = s.UserId 
		AND u.IsSuperUser = 1 
		AND u.IsDeleted = 0
		INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS up 
		ON  up.UserId = u.UserID
		AND up.PortalId = @PortalId
		AND up.IsDeleted = 0
		AND up.Authorised = 1
		WHERE (s.Mode = @SubType)
		AND (S.ForumId = @ForumId AND S.TopicId = 0)
		AND (NOT EXISTS (SELECT * FROM @subs WHERE userid = s.UserId))
	)

/* get auto subscriptions based on roles */
DECLARE @AutoSubscribe bit
DECLARE @AutoSubscribeRoles nvarchar(255)
DECLARE @TopicsOnly bit
DECLARE @IsNewTopic bit
SET @AutoSubscribe = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings as S INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as F ON F.ForumSettingsKey = S.GroupKey  WHERE S.SettingName = 'AUTOSUBSCRIBEENABLED' AND F.ForumId  = @ForumId),0)
SET @AutoSubscribeRoles = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings as S INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as F ON F.ForumSettingsKey = S.GroupKey  WHERE S.SettingName = 'AUTOSUBSCRIBEROLES' AND F.ForumId  = @ForumId),'')
SET @TopicsOnly = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings as S INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as F ON F.ForumSettingsKey = S.GroupKey  WHERE S.SettingName = 'AUTOSUBSCRIBENEWTOPICSONLY' AND F.ForumId  = @ForumId),0)
SET @IsNewTopic = 0
IF (SELECT ReplyCount FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId) > 0
	SET @IsNewTopic = 1

If (@TopicsOnly = 1 AND @IsNewTopic = 0) OR (@TopicsOnly = 0)
	BEGIN
	IF @AutoSubscribe = 1 AND @AutoSubscribeRoles <> ''
		BEGIN
		
			INSERT INTO @subs 
			(userid, email, topicsubscriber)
			(SELECT u.UserID, u.Email, 0 AS topicsubscriber  /*auto subscribers are never topic-specific subscribers */
				FROM {databaseOwner}{objectQualifier}Users AS u 
				INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS up 
				ON  up.UserId = u.UserID
				AND up.PortalId = @PortalId
				AND up.IsDeleted = 0
				AND up.Authorised = 1
				INNER JOIN {databaseOwner}{objectQualifier}UserRoles AS ur 
				ON ur.UserID = u.UserID 
				AND (
							(ur.EffectiveDate IS NULL AND ur.ExpiryDate >= GETDATE()) /* DNN platform user roles still use native GETDATE() not GETUTCDATE() */
						OR (ur.EffectiveDate IS NULL AND ur.ExpiryDate IS NULL)
						OR (ur.EffectiveDate <= GETDATE() AND ur.ExpiryDate IS NULL)
						OR (ur.EffectiveDate <= GETDATE() AND ur.ExpiryDate >= GETDATE())
					)
				INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@AutoSubscribeRoles,';') AS r 
				ON r.ID = ur.RoleId
				WHERE (u.IsDeleted = 0)
				AND (NOT EXISTS (SELECT * FROM @subs WHERE userid = u.UserID))
			)

		END
	END
	
/* return the results */	
SELECT DISTINCT userid, email, topicsubscriber FROM @subs
GO


/* issue 1463 - end - update procedure to remove parsing from CanSubscribe for activeforums_Permissions */