/* issue 93 - move templates to file-based */

SET NOCOUNT ON

/* remove unused cache setting -- may not exist in some installations */
DELETE FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'TEMPLATECACHE'
/* remove unused cache setting */

/* add FileName column to activeforums_Templates */
IF NOT EXISTS(SELECT * FROM SYS.COLUMNS WHERE Name = N'FileName' and Object_ID = Object_ID(N'{databaseOwner}[{objectQualifier}activeforums_Templates]'))    
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Templates] 
		ADD FileName nvarchar(255) NULL
END
GO
/* add FileName column to activeforums_Templates */

/* Populate FileNames for existing templates */
SET NOCOUNT ON
DECLARE @ModuleId int
DECLARE @TemplateId int
DECLARE @Title nvarchar(150)
DECLARE modulecursor CURSOR FOR
	SELECT DISTINCT ModuleId from {databaseOwner}{objectQualifier}activeforums_Templates WHERE FileName IS NULL
OPEN modulecursor
	FETCH NEXT FROM modulecursor INTO @ModuleId
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE templatecursor CURSOR FOR
			SELECT TemplateId, Title from {databaseOwner}{objectQualifier}activeforums_Templates WHERE ModuleId = @ModuleId AND FileName IS NULL 
		OPEN templatecursor
		FETCH NEXT FROM templatecursor INTO @TemplateId,@Title
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @TemplateTitleCount int
			SET @TemplateTitleCount = (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE Title = @Title AND ModuleId = @ModuleId)
			IF @TemplateTitleCount <> 1 
				BEGIN 
					UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'-',LTRIM(STR(@ModuleId)),'-',LTRIM(STR(TemplateId)),'.ascx') WHERE TemplateId = @TemplateId
				END
			ELSE
				BEGIN
					UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'.ascx') WHERE TemplateId = @TemplateId 
				END
			FETCH NEXT FROM templatecursor INTO @TemplateId,@Title
		END
		CLOSE templatecursor
		DEALLOCATE templatecursor
		FETCH NEXT FROM modulecursor INTO @ModuleId	
	END
CLOSE modulecursor
DEALLOCATE modulecursor
GO 
/* Populate FileNames for existing templates */


SET NOCOUNT ON
DECLARE @TemplateId int
DECLARE @Title nvarchar(150)
DECLARE templatecursor CURSOR FOR
SELECT TemplateId, Title from {databaseOwner}{objectQualifier}activeforums_Templates WHERE FileName IS NULL
OPEN templatecursor
FETCH NEXT FROM templatecursor INTO @TemplateId,@Title
WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @TemplateTitleCount int
		SET @TemplateTitleCount = (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE Title = @Title)
		IF @TemplateTitleCount <> 1 
			BEGIN 
				UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'-',LTRIM(STR(TemplateId)),'.ascx') WHERE TemplateId = @TemplateId AND FileName IS NULL
			END
		ELSE
			BEGIN
				UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'.ascx') WHERE TemplateId = @TemplateId AND FileName IS NULL
			END
		FETCH NEXT FROM templatecursor INTO @TemplateId,@Title
	END
CLOSE templatecursor
DEALLOCATE templatecursor
GO
/* Populate FileNames for existing templates */

/*activeforums_Templates_Save*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Templates_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Templates_Save]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Templates_Save]
	@TemplateId int,
	@PortalId int,
	@ModuleId int,
	@TemplateType int,
	@IsSystem bit,
	@Title nvarchar(150),
	@Subject nvarchar(200),
	@Template ntext	
AS
BEGIN
IF EXISTS (Select TemplateId FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE TemplateId = @TemplateID AND PortalId = @PortalId AND ModuleId = @ModuleID) 
	--UPDATE
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Templates
			SET
				TemplateType = @TemplateType,
				IsSystem = @IsSystem,
				Title = @Title,
				Subject = @Subject,
				Template = @Template,
				DateUpdated = GETUTCDATE()
			WHERE
				TemplateId = @TemplateId AND PortalId = @PortalId AND ModuleId = @ModuleId
	END
ELSE
	--INSERT
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Templates
			(PortalId, ModuleId, TemplateType, Title, Subject, Template, DateCreated)
			VALUES
			(@PortalId, @ModuleId, @TemplateType,@Title,@Subject,@Template, GETUTCDATE())
		SET @TemplateId = SCOPE_IDENTITY()
		DECLARE @TemplateTitleCount int
		SET @TemplateTitleCount = (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE Title = @Title) 
		IF @TemplateTitleCount <> 1 
			BEGIN
				UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'-',LTRIM(STR(TemplateId)),'.ascx') WHERE TemplateId = @TemplateId AND FileName IS NULL
			END
			ELSE
				BEGIN
					UPDATE {databaseOwner}{objectQualifier}activeforums_Templates SET FileName = CONCAT(RTRIM(Title),'.ascx') WHERE TemplateId = @TemplateId AND FileName IS NULL
				END 
	END
END

SELECT @TemplateId
GO
/*activeforums_Templates_Save*/


/*activeforums_Templates_List*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Templates_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Templates_List]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Templates_List]
@PortalId int,
	@ModuleId int,
	@TemplateType int = 0,
	@RowIndex int = 0, 
	@MaxRows int = 100000
AS
If @TemplateType = 0 OR @TemplateType = -1
	BEGIN
		BEGIN 
			SELECT Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE (ModuleId = @ModuleId OR @ModuleId = -1)
		END
		BEGIN
			SELECT TemplateId, PortalId, ModuleId, TemplateType, IsSystem,Title,FileName,Subject,Template,DateCreated,DateUpdated,RowRank
			 FROM
				(
					SELECT TemplateId, PortalId, ModuleId, TemplateType, IsSystem,Title,FileName,Subject,Template,DateCreated,DateUpdated,
					ROW_NUMBER() OVER (ORDER BY TemplateType, Title) as RowRank FROM {databaseOwner}{objectQualifier}activeforums_Templates 
					WHERE (ModuleId = @ModuleId OR @ModuleId = -1)
				) as T WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
		END
	END
ELSE
	BEGIN
		BEGIN 
			SELECT Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE (ModuleId = @ModuleId OR @ModuleId = -1) AND TemplateType = @TemplateType
		END
		BEGIN
			SELECT * FROM {databaseOwner}{objectQualifier}activeforums_Templates WHERE (ModuleId = @ModuleId OR @ModuleId = -1) AND TemplateType = @TemplateType
			ORDER BY Title
		END
	END
GO
/*activeforums_Templates_List*/

/* issue 93 - move templates to file-based */

/* issues 254 -- begin -- Unable to move forums / forum groups up/down when forums or groups have been deleted */

/*activeforums_Forums_MoveForum*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum]
GO

CREATE PROCEDURE  {databaseOwner}{objectQualifier}activeforums_Forums_MoveForum
@ModuleId int,
@ForumID int, 
@SortDirection int
AS
BEGIN
	DECLARE @currIndex int
	DECLARE @newIndex int
	DECLARE @tmpForumId int
	DECLARE @forumGroupId int
	DECLARE @ParentForumId int
	SET @ParentForumId = (SELECT ParentForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ForumId = @ForumId)
	SET @currIndex = (SELECT SortOrder FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and ForumId = @ForumId)
	SET @forumGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and ForumId = @ForumId)
	IF @SortDirection < 0 
	BEGIN
		SET @tmpForumId = (SELECT TOP 1 ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId AND SortOrder <= (@currIndex + @SortDirection) ORDER BY SortOrder DESC)
	END
	ELSE
	BEGIN
		SET @tmpForumId = (SELECT TOP 1 ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId AND SortOrder >= (@currIndex + @SortDirection) ORDER BY SortOrder ASC)
	END
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = (@currIndex + @SortDirection) WHERE ModuleId = @ModuleId AND ForumId = @ForumId
		IF @tmpForumId IS NOT NULL AND @tmpForumId >= 0 
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = @currIndex WHERE ModuleId = @ModuleId AND ForumId = @tmpForumId
		END
	END
END
GO

/*activeforums_Groups_MoveGroup*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Groups_MoveGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Groups_MoveGroup]
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Groups_MoveGroup
@ModuleId int,
@ForumGroupId int,
@SortDirection int
AS
BEGIN
	DECLARE @currIndex int
	DECLARE @newIndex int
	DECLARE @tmpGroupId int
	SET @currIndex = (SELECT SortOrder FROM {databaseOwner}{objectQualifier}activeforums_Groups WHERE ModuleId = @ModuleId and ForumGroupId = @ForumGroupId)
	IF @SortDirection < 0 
	BEGIN
		SET @tmpGroupId = (SELECT TOP 1 ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Groups WHERE ModuleId = @ModuleId AND SortOrder <= (@currIndex + @SortDirection) ORDER BY SortOrder DESC)
	END
	ELSE
	BEGIN
		SET @tmpGroupId = (SELECT TOP 1 ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Groups WHERE ModuleId = @ModuleId AND SortOrder >= (@currIndex + @SortDirection) ORDER BY SortOrder ASC )
	END
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Groups SET SortOrder = (@currIndex + @SortDirection) WHERE ModuleId = @ModuleId AND ForumGroupId = @ForumGroupId
		IF @tmpGroupId IS NOT NULL AND @tmpGroupId >= 0 
		BEGIN
		
			UPDATE {databaseOwner}{objectQualifier}activeforums_Groups SET SortOrder = @currIndex WHERE ModuleId = @ModuleId AND ForumGroupId = @tmpGroupId
		END
	END
END
GO
/* issues 254 -- end -- Unable to move forums / forum groups up/down when forums or groups have been deleted */

/* issues 462 -- begin -- change theme called "_default" to "_legacy" */

SET NOCOUNT ON 
UPDATE ms SET SettingValue = '_legacy' 
FROM {databaseOwner}{objectQualifier}ModuleSettings ms 
INNER JOIN {databaseOwner}{objectQualifier}Modules m ON m.ModuleID = ms.ModuleID 
INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON md.ModuleDefID = m.ModuleDefID 
INNER JOIN {databaseOwner}{objectQualifier}DesktopModules dm on dm.DesktopModuleID = md.DesktopModuleID 
WHERE dm.ModuleName = 'Active Forums' AND ms.SettingName = 'THEME' AND ms.SettingValue = '_default'
GO

/* issues 462 -- end -- change theme called "_default" to "_legacy" */

/* begin - issue #165 - ban user feature  */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_Delete_For_User]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Delete_For_User];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Delete_For_User]
@ModuleId int,
@UserId int,
@DelBehavior int 
AS

BEGIN

SET NOCOUNT ON

IF @DelBehavior = 1
	BEGIN
		UPDATE t SET t.IsDeleted = 1
		FROM {databaseOwner}[{objectQualifier}activeforums_Topics] t 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = t.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId and c.IsDeleted = 0
		UPDATE r SET r.IsDeleted = 1
		FROM {databaseOwner}[{objectQualifier}activeforums_Replies] r 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = r.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId and c.IsDeleted = 0
		UPDATE c SET c.IsDeleted = 1, c.DateUpdated = GETUTCDATE() 
		FROM {databaseOwner}[{objectQualifier}activeforums_Content] c 
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId and c.IsDeleted = 0
	END
ELSE
	BEGIN
		DELETE tr
		FROM {databaseOwner}[{objectQualifier}activeforums_Topics_Ratings] tr
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Topics] t 
		ON t.TopicId = tr.TopicId
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = t.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId
		DELETE tt
		FROM {databaseOwner}[{objectQualifier}activeforums_Topics_Tags] tt
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Topics] t 
		ON t.TopicId = tt.TopicId
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = t.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId
		DELETE ft
		FROM {databaseOwner}[{objectQualifier}activeforums_ForumTopics] ft
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Topics] t 
		ON t.TopicId = ft.TopicId
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = t.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId
		DELETE t
		FROM {databaseOwner}[{objectQualifier}activeforums_Topics] t 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = t.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId
		DELETE r
		FROM {databaseOwner}[{objectQualifier}activeforums_Replies] r 
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Content] c 
		ON c.ContentId = r.ContentId
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId
		DELETE c
		FROM {databaseOwner}[{objectQualifier}activeforums_Content] c 
		WHERE c.AuthorId = @UserId AND c.ModuleId = @ModuleId
	END
END

DECLARE @ForumId INT
		 
BEGIN
	DECLARE forums_cursor CURSOR FOR SELECT ForumId FROM {databaseOwner}[{objectQualifier}activeforums_Forums] WHERE ModuleId = @ModuleId 
	OPEN forums_cursor
		FETCH NEXT FROM forums_cursor into @ForumId
			WHILE (@@fetch_status = 0)
			BEGIN
				EXEC {databaseOwner}[{objectQualifier}activeforums_Forums_LastUpdates] @ForumId
				EXEC {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev] @ForumId
			FETCH NEXT FROM forums_cursor INTO @ForumId
			END
	CLOSE forums_cursor
	DEALLOCATE forums_cursor
END
GO

/* end - issue #165 -  ban user feature  */ 
/* issues 462 -- end -- change theme called "_default" to "_legacy" */


/* issue 420 - new topic views */

SET NOCOUNT ON

/*activeforums_UI_MostReplies*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MostReplies]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostReplies]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostReplies]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@TimeFrame int,
	@ForumIds nvarchar(1000)
AS

	SET NOCOUNT ON;

	-- Populate our active topics table
	
	CREATE TABLE #MostReplies(RowRank int NOT NULL, TopicId int NOT NULL)
	
	INSERT INTO #MostReplies(RowRank, TopicId)
	SELECT ROW_NUMBER() OVER (
			ORDER BY 
				CASE 
					WHEN @Sort = 'DESC' THEN T.ReplyCount END DESC, 
				CASE  
					WHEN @Sort = 'ASC' THEN T.ReplyCount END ASC) as RowRank, 
		T.TopicId
	FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView T INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = T.ForumId
	WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND DATEDIFF(mi,t.LastReplyDate,GETUTCDATE())<= @TimeFrame

	-- Get our record count
	
	DECLARE @RecordCount int
	SET @RecordCount = (SELECT COUNT(*) FROM #MostReplies)

	-- Return our result set

	SELECT 
		f.ForumId,
		f.ForumName,
		IsNull(f.LastReplyId,0) as LastReplyId,
		t.TopicId,
		t.ViewCount,
		t.ReplyCount,
		t.IsLocked,
		t.IsPinned,
		IsNull(t.TopicIcon,'') as TopicIcon,
		t.StatusId,
		t.IsAnnounce,
		t.AnnounceStart,
		t.AnnounceEnd,
		t.TopicType,
		c.Subject,
		IsNull(c.Summary,'') as Summary,
		IsNull(c.AuthorId,-1) as AuthorId,
		IsNull(c.AuthorName,'') as AuthorName,
		c.Body,
		c.DateCreated,
		IsNull(u.Username,'') as AuthorUserName,
		IsNull(u.FirstName,'') as AuthorFirstName,
		IsNull(u.LastName,'') as AuthorLastName,
		IsNull(u.DisplayName,'') as AuthorDisplayName,
		CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
		CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
		CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
		CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
		CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
		CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
		CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
		CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
		CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
		CASE WHEN TT.LastReplyId < ISNULL(f.LastReplyId,0) THEN TT.LastReplyId ELSE 0 END AS LastReplyRead, 
		CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
		CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
		CASE WHEN ftt.LastReplyID <= tt.LastReplyId OR (ISNULL(ftt.LastReplyId,'') = 0 AND c.AuthorId = @UserId) OR (FT.MaxReplyRead >= ftt.LastReplyId) THEN 1 ELSE 0 END AS IsRead,
		ftt.LastReplyId as TopicLastReplyId,
		tr.TopicRating, 
		@RecordCount as RecordCount,
		ISNULL(t.URL,'') as  TopicURL,
		ISNULL(f.PrefixURL,'') as ForumUrl,
		ISNULL(g.PrefixURL,'') as GroupUrl,
		g.ForumGroupId,
		IsNull(S.Mode,0) AS SubscriptionType
		
		FROM	#MostReplies as tmp 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t on t.TopicId = tmp.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics AS ftt ON ftt.TopicId = t.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_forums as f ON f.forumId = ftt.ForumId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = t.ContentId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}vw_activeforums_TopicRatings as tr on tr.TopicId = t.TopicId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as u on u.UserId = c.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r on r.ReplyId = ftt.LastReplyId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Content as rc on rc.ContentId = r.ContentId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as ru on ru.UserId = rc.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS tt ON tt.TopicId = t.TopicId AND t.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as ft ON ft.ForumId = f.ForumId AND ft.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Subscriptions AS S ON S.ForumId = f.ForumId AND S.TopicId = T.TopicId and S.UserId = @UserId
				
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	ORDER BY RowRank

	DROP TABLE #MostReplies
GO



/*activeforums_UI_MostLiked*/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MostLiked]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostLiked]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MostLiked]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@TimeFrame int,
	@ForumIds nvarchar(1000)
AS

	SET NOCOUNT ON;
	
	-- Populate our active topics table
	
	CREATE TABLE #MostLiked(RowRank int NOT NULL, TopicId int NOT NULL)
	
	INSERT INTO #MostLiked(RowRank, TopicId)
	SELECT ROW_NUMBER() OVER (
			ORDER BY 
				CASE 
					WHEN @Sort = 'DESC' THEN (COALESCE(tl.LikeCount,0)+COALESCE(rl.LikeCount,0)) END DESC, 
				CASE  
					WHEN @Sort = 'ASC' THEN (COALESCE(tl.LikeCount,0)+COALESCE(rl.LikeCount,0)) END ASC) as RowRank, 
		T.TopicId
	FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView T INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = T.ForumId

		LEFT OUTER JOIN (SELECT l.PostId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l WHERE l.Checked = 1 GROUP BY l.PostId) tl ON tl.PostId = T.TopicId
		LEFT OUTER JOIN (SELECT r.TopicId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l INNER JOIN {databaseOwner}{objectQualifier}activeforums_Replies r ON r.ReplyId = l.PostId WHERE l.Checked = 1 GROUP BY r.TopicId) rl ON rl.TopicId = T.TopicId


	WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND (COALESCE(tl.LikeCount,0)+COALESCE(rl.LikeCount,0)) > 0 AND DATEDIFF(mi,t.LastReplyDate,GETUTCDATE())<= @TimeFrame 

	-- Get our record count
	
	DECLARE @RecordCount int
	SET @RecordCount = (SELECT COUNT(*) FROM #MostLiked)

	-- Return our result set

	SELECT 
		f.ForumId,
		f.ForumName,
		IsNull(f.LastReplyId,0) as LastReplyId,
		t.TopicId,
		t.ViewCount,
		t.ReplyCount,
		t.IsLocked,
		t.IsPinned,
		IsNull(t.TopicIcon,'') as TopicIcon,
		t.StatusId,
		t.IsAnnounce,
		t.AnnounceStart,
		t.AnnounceEnd,
		t.TopicType,
		c.Subject,
		IsNull(c.Summary,'') as Summary,
		IsNull(c.AuthorId,-1) as AuthorId,
		IsNull(c.AuthorName,'') as AuthorName,
		c.Body,
		c.DateCreated,
		IsNull(u.Username,'') as AuthorUserName,
		IsNull(u.FirstName,'') as AuthorFirstName,
		IsNull(u.LastName,'') as AuthorLastName,
		IsNull(u.DisplayName,'') as AuthorDisplayName,
		CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
		CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
		CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
		CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
		CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
		CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
		CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
		CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
		CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
		CASE WHEN TT.LastReplyId < ISNULL(f.LastReplyId,0) THEN TT.LastReplyId ELSE 0 END AS LastReplyRead, 
		CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
		CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
		CASE WHEN ftt.LastReplyID <= tt.LastReplyId OR (ISNULL(ftt.LastReplyId,'') = 0 AND c.AuthorId = @UserId) OR (FT.MaxReplyRead >= ftt.LastReplyId) THEN 1 ELSE 0 END AS IsRead,
		ftt.LastReplyId as TopicLastReplyId,
		tr.TopicRating, 
		@RecordCount as RecordCount,
		ISNULL(t.URL,'') as  TopicURL,
		ISNULL(f.PrefixURL,'') as ForumUrl,
		ISNULL(g.PrefixURL,'') as GroupUrl,
		g.ForumGroupId,
		IsNull(S.Mode,0) AS SubscriptionType
		
		FROM	#MostLiked as tmp 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t on t.TopicId = tmp.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics AS ftt ON ftt.TopicId = t.TopicId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_forums as f ON f.forumId = ftt.ForumId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = t.ContentId 
		
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}vw_activeforums_TopicRatings as tr on tr.TopicId = t.TopicId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as u on u.UserId = c.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r on r.ReplyId = ftt.LastReplyId 
		LEFT OUTER JOIN (SELECT l.PostId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l WHERE l.Checked = 1 GROUP BY l.PostId) tl ON tl.PostId = t.TopicId
		LEFT OUTER JOIN (SELECT r.TopicId, COUNT(*) AS LikeCount FROM {databaseOwner}{objectQualifier}activeforums_Likes l INNER JOIN {databaseOwner}{objectQualifier}activeforums_Replies r ON r.ReplyId = l.PostId WHERE l.Checked = 1 GROUP BY r.TopicId) rl ON rl.TopicId = t.TopicId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Content as rc on rc.ContentId = r.ContentId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users as ru on ru.UserId = rc.AuthorId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS tt ON tt.TopicId = t.TopicId AND tt.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as ft ON ft.ForumId = f.ForumId AND ft.UserId = @UserId 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Subscriptions AS S ON S.ForumId = f.ForumId AND S.TopicId = T.TopicId and S.UserId = @UserId
				
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	ORDER BY RowRank

	DROP TABLE #MostLiked
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_URL_Search]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_URL_Search]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_URL_Search]
@PortalId int,
@Url nvarchar(max)
AS
DECLARE @views TABLE(id int,viewname nvarchar(50))
INSERT INTO @views (id,viewname) VALUES (1,'unanswered');
INSERT INTO @views (id,viewname) VALUES (2,'notread');
INSERT INTO @views (id,viewname) VALUES (3,'mytopics');
INSERT INTO @views (id,viewname) VALUES (4,'activetopics');
INSERT INTO @views (id,viewname) VALUES (5,'afprofile');
INSERT INTO @views (id,viewname) VALUES (6,'mostliked');
INSERT INTO @views (id,viewname) VALUES (7,'mostreplies');
SELECT TabId, ModuleID, ForumGroupId, ForumId, TopicId, Url,Archived,OtherId,UrlType FROM 
	(
		SELECT tb.TabID,m.ModuleId, g.ForumGroupId,f.ForumId,t.TopicId, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' + f.PrefixURL + '/' + t.URL + '/' as URL, 0 as Archived,-1 as OtherId,0 as URLType from {databaseOwner}[{objectQualifier}activeforums_Topics] as t
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_ForumTopics] as ft ON ft.TopicId = t.TopicId
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Forums] as f ON f.ForumId = ft.ForumId
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] as g ON g.ForumGroupId = f.ForumGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}ModuleSettings] as s ON s.ModuleId = f.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = f.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(t.URL,'') <> '' AND ISNULL(f.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,g.ForumGroupId,f.ForumId,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' + f.PrefixURL + '/' as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}[{objectQualifier}activeforums_Forums] as f
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] as g ON g.ForumGroupId = f.ForumGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}ModuleSettings] as s ON s.ModuleId = f.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = f.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(f.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,g.ForumGroupId,-1,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}[{objectQualifier}activeforums_Groups] as g 
			INNER JOIN {databaseOwner}[{objectQualifier}ModuleSettings] as s ON s.ModuleId = g.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = g.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(g.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,-1,-1,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}[{objectQualifier}ModuleSettings] as s 
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = s.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND s.SettingValue <> ''
		UNION
		SELECT m.TabID,m.ModuleID,u.ForumGroupId,u.ForumId,u.TopicId, u.URL, 1 as Archived,-1,0 from {databaseOwner}[{objectQualifier}activeforums_URL] as u
			INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Groups] as g ON u.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = g.ModuleId
		WHERE u.PortalId = @PortalId
		UNION
		SELECT TabId, ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId, 
			(CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + UrlOther + '/' + v.viewname + '/' as URL,0 as Archived,v.id,1 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}[{objectQualifier}ModuleSettings] as ss
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLOTHER') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,UrlOther)) as pu,@views as v
		UNION
		SELECT TabId, pu.ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId,
		 (CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + URLCATS + '/' + REPLACE(LOWER(t.TagName),' ','-') + '/' as URL,0 as Archived,t.TagId,2 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}[{objectQualifier}ModuleSettings] as ss
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLCATS') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,URLCATS)) as pu
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Tags] as t ON t.ModuleId = pu.ModuleId AND t.IsCategory = 1
		UNION
		SELECT TabId, pu.ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId,
		 (CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + URLTAGS + '/' + REPLACE(LOWER(t.TagName),' ','-') + '/' as URL,0 as Archived,t.TagId,3 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}[{objectQualifier}ModuleSettings] as ss
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLTAGS') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,URLTAGS)) as pu
		INNER JOIN {databaseOwner}[{objectQualifier}activeforums_Tags] as t ON t.ModuleId = pu.ModuleId AND t.IsCategory = 0
	) as urls
	WHERE LOWER(urls.URL) = @URL
GO


/* issue 420 -  new topic views  */

